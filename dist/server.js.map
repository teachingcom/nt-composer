{"version":3,"sources":["../compile/cache.js","../compile/paths.js","../compile/utils.js","../compile/generate-spritesheet.js","../compile/generate-resource.js","../compile/scan-directory.js","../compile/generate-resource-from-dir.js","../compile/generate-sounds-spritesheet.js","../compile/compile-progress-path.js","../compile/compile.js","../compile/index.js","server.js"],"names":["data","load","path","content","fs","readFile","parsed","JSON","parse","toString","Object","assign","ex","paths","exec","script","INPUT_DIR","OUTPUT_DIR","process","argv","resolve","replacePaths","inputDir","outputDir","readYml","exists","contents","yml","console","error","getDirectoryContents","dir","markup","images","files","readdir","file","source","stat","isDirectory","lastModified","mtime","ext","extname","ref","indexOf","push","asyncCallback","action","args","Promise","reject","err","res","fileToKey","_","snakeCase","basename","timeout","time","setTimeout","JPG_COMPRESSION_ARGS","PNG_COMPRESSION_ARGS","generateSpritesheet","spritesheets","nodeId","spritesheetName","subdir","spritesheetId","basePath","pngPath","jpgPath","jpgs","filter","item","test","pngs","hasPngs","some","hasJpgs","generatedTimes","getModifiedTime","lastGenerated","expired","Math","min","apply","isNaN","existing","get","cache","sprites","hasPng","createSpritesheetFromImages","hasJpg","tmpId","resourceDir","dirname","substr","length","tmpDir","mkdirp","compress_force","statistic","autoupdate","jpg","engine","command","png","svg","gif","completed","remove","saveTo","src","map","image","coordinates","Spritesmith","run","bounds","name","Error","x","y","width","height","target","writeFile","statSync","generateResource","root","node","id","options","pathId","log","key","scanDirectory","dirs","location","isHidden","allowType","allowFiles","allowHidden","generateResourcesFromDirectory","generateSoundSprites","input","entries","entry","isMP3","buffer","duration","copyMP3s","silence","silenceBuffer","spacer","sounds","sprite","output","mergeMP3FilesToOutput","copyAndCompressMP3","on","audioBitrate","audioChannels","mergeToFile","concat","base","compileProgressPath","offsetX","offsetY","extractFile","points","distance","extractPoints","createProgress","doc","xml2js","parseStringPromise","rect","$","d","omgsvg","SVGPathParser","seek_next_cmd","parse_cur_args","index","isStart","dist","previous","hypot","isLine","cx1","cy1","cx2","cy2","curve","Bezier","isBezier","progress","normalizePoint","max","current","segment","round","lut","getLUT","point","t","i","DEBUG","compile","exported","tracks","trails","intro","nitros","cars","namecards","extras","trackName","fullTrackDir","variant","animations","crowd","generated","stringify","utils","allUtils","CONFIG","ROOT","ws","waitingForAssets","pendingRefresh","connections","serve","config","bundler","port","dev","Bundler","outDir","sourceMaps","app","configureWebSockets","use","express","static","watch","queueCompileAssets","middleware","waitForAssets","listen","Server","socket","splice","clearTimeout","compileAssets","notifyConnections","message","send"],"mappings":"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","file":"server.js","sourceRoot":"../preview","sourcesContent":["import fs from 'fs-extra';\n\n/** the previous version of the file */\nexport const data = { };\n\n// tries to load the previous document, if any\nexport async function load(path) {\n\ttry {\n\t\tconst content = await fs.readFile(path);\n\t\tconst parsed = JSON.parse(content.toString());\n\t\tObject.assign(data, parsed);\n\t}\n\t// wasn't able to restore the file\n\tcatch (ex) { }\n}\n","import path from 'path';\nconst [ exec, script, INPUT_DIR, OUTPUT_DIR ] = (process.argv || [ ]);\n\n// get the root path\nconst paths = { \n\tOUTPUT_DIR: path.resolve(INPUT_DIR || ''),\n\tINPUT_DIR: path.resolve(OUTPUT_DIR || ''),\n};\n\nexport function replacePaths(inputDir, outputDir) {\n\tpaths.INPUT_DIR = inputDir;\n\tpaths.OUTPUT_DIR = outputDir;\n}\n\nexport default paths;","import _ from 'lodash';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport yml from 'js-yaml';\n\n/** reads a YML file */\nexport async function readYml(path) {\n\n\t// make sure this exists\n\tconst exists = await fs.exists(path);\n\tif (!exists) return null;\n\n\t// try and read the content\n\ttry {\n\t\tconst contents = await fs.readFile(path);\n\t\treturn yml.load(contents.toString());\n\t}\n\tcatch (ex) {\n\t\tconsole.error(`YAML Error in ${path}`);\n\t\tthrow ex;\n\t}\n}\n\n/** gather up contents for a directory */\nexport async function getDirectoryContents(dir) {\n\tlet markup = [ ];\n\tlet images = [ ];\n\n\t// get modified times for each file\n\tconst files = await fs.readdir(dir);\n\tfor (let file of files) {\n\n\t\t// get the source\n\t\tconst source = path.resolve(`${dir}/${file}`);\n\t\tconst stat = await fs.stat(source);\n\t\tconst isDirectory = stat.isDirectory();\n\t\tconst lastModified = +stat.mtime;\n\t\tconst ext = path.extname(file);\n\t\t\n\t\t// skip directories and hidden files\n\t\tif (isDirectory || file[0] === '.') continue;\n\n\t\t// add to the correct group\n\t\tconst ref = !!~['.yml', '.yaml'].indexOf(ext) ? markup\n\t\t\t: !!~['.jpg', '.jpeg', '.png'].indexOf(ext) ? images\n\t\t\t: null;\n\n\t\t// create the record\n\t\tif (ref) ref.push({ path: source, lastModified });\n\t}\n\n\treturn { markup, images };\n}\n\n/** perfoms a callback as an async call */\nexport async function asyncCallback(action, ...args) {\n\treturn new Promise((resolve, reject) => {\n\t\taction(...args, (err, ...res) => {\n\t\t\tif (err) reject(err);\n\t\t\telse resolve(...res);\n\t\t});\n\t});\n}\n\n/** generates a key from a file name or path */\nexport function fileToKey(file) {\n\treturn _.snakeCase(path.basename(file, path.extname(file)))\n}\n\n/** waits a specified time */\nexport async function timeout(time) {\n\treturn new Promise(resolve => {\n\t\tsetTimeout(resolve, time);\n\t});\n}","import _ from 'lodash';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport Spritesmith from 'spritesmith';\nimport compressImages from 'compress-images';\n\nimport { fileToKey, asyncCallback, timeout } from './utils.js';\nimport paths from './paths.js';\nimport * as cache from './cache.js';\n\n// compression args\nconst JPG_COMPRESSION_ARGS = ['-quality', '100'];\nconst PNG_COMPRESSION_ARGS = [256, '-f', '--strip', '--skip-if-larger'];\n\nexport async function generateSpritesheet(spritesheets, nodeId, spritesheetName, subdir, images) {\n\tconst { OUTPUT_DIR } = paths;\n\tconst spritesheetId = `${subdir}${spritesheetName || nodeId}`;\n\n\t// get the possible paths\n\tconst basePath = path.resolve(`${OUTPUT_DIR}/${spritesheetId}`);\n\tconst pngPath = `${basePath}.png`;\n\tconst jpgPath = `${basePath}.jpg`;\n\n\t// check for certain type\n\tconst jpgs = _.filter(images, item => /jpe?g$/i.test(item.path));\n\tconst pngs = _.filter(images, item => /png$/i.test(item.path));\n\n\t// check if \n\tconst hasPngs = _.some(pngs);\n\tconst hasJpgs = _.some(jpgs);\n\n\t// check each time, but only if the image type is expected\n\tconst generatedTimes = [ ];\n\tif (hasPngs) generatedTimes.push(getModifiedTime(pngPath));\n\tif (hasJpgs) generatedTimes.push(getModifiedTime(jpgPath));\n\tlet lastGenerated = Math.min.apply(Math, generatedTimes);\n\tif (isNaN(lastGenerated)) lastGenerated = 0;\n\n\t// if all of the images have a lower write time\n\t// than the sprite sheet then we don't need to compile it again\n\tlet expired;\n\tfor (const item of images) {\n\t\texpired = expired || item.lastModified > lastGenerated;\n\t}\n\n\t// check and make sure the prior data is available\n\tconst existing = _.get(cache.data, 'spritesheets', { })[spritesheetId];\n\t\n\t// if it's not expired and we have the old info then\n\t// we can just reuse it\n\tif (!expired && existing) {\n\t\tspritesheets[spritesheetId] = existing;\n\t\treturn;\n\t}\n\n\t// save the new spritesheet location\n\tconst sprites = spritesheets[spritesheetId] = { };\n\n\t// generate PNGs\n\tif (hasPngs) {\n\t\tsprites.hasPng = true;\n\t\tawait createSpritesheetFromImages(spritesheetId, sprites, pngs, pngPath);\n\t}\n\t\n\t// generate JPGs\n\tif (hasJpgs) {\n\t\tsprites.hasJpg = true;\n\t\tawait createSpritesheetFromImages(spritesheetId, sprites, jpgs, jpgPath);\n\t}\n\t\n\t// there seems to be some timing issues - give a moment to \n\t// settle down before compressing - ideally, we can just\n\t// pipe results eventually\n\tawait timeout(2000);\n\n\t// verify the resource directory\n\tconst tmpId = _.snakeCase(spritesheetId);\n\tconst resourceDir = `dist${path.dirname(basePath).substr(OUTPUT_DIR.length)}`;\n\tconst tmpDir = `${resourceDir}/_${tmpId}`;\n\tawait fs.mkdirp(resourceDir);\n\n\t// compress resources\n\treturn new Promise((resolve, reject) => {\n\t\tcompressImages(\n\t\t\t`${tmpDir}/*.{jpg,png}`, // input\n\t\t\t`${resourceDir}/`, // output\n\t\t\t{\n\t\t\t\tcompress_force: true,\n\t\t\t\tstatistic: true,\n\t\t\t\tautoupdate: false,\n\t\t\t},\n\t\t\tfalse, // ??\n\t\t\t{ jpg: {engine: 'mozjpeg', command: JPG_COMPRESSION_ARGS}},\n\t\t\t{ png: {engine: 'pngquant', command: PNG_COMPRESSION_ARGS}},\n\t\t\t{svg: {engine: false, command: false}},\n\t\t\t{gif: {engine: false, command: false}},\n\n\t\t\t// finalize\n\t\t\tasync function(error, completed, statistic){\n\n\t\t\t\t// remove the temporary generation dir\n\t\t\t\tfs.remove(tmpDir);\n\n\t\t\t\t// check for errors\n\t\t\t\tif (error) {\n\t\t\t\t\tconsole.error(`Compression failure for ${resourceDir}`);\n\t\t\t\t\tconsole.error(error);\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t\t// compressed as expected\n\t\t\t\telse resolve();\n\t\t\t});\n\t\t});\n}\n\n// updates the spritesheet with image names\nasync function createSpritesheetFromImages(spritesheetId, sprites, images, saveTo) {\n\n\t// convert to a spritesheet\n\tconst src = _.map(images, item => item.path);\n\tconst { image, coordinates } = await asyncCallback(Spritesmith.run, { src });\n\tconst ext = path.extname(saveTo).substr(1);\n\t\n\t// simplify the output format\n\tfor (const file in coordinates) {\n\t\tconst bounds = coordinates[file];\n\t\tconst name = fileToKey(file);\n\n\t\t// if this name already exists, then there's a conflict in\n\t\t// names and needs to be stopped\n\t\tif (sprites[name]) {\n\t\t\tthrow new Error(`Conflicting sprite name: ${name} in ${spritesheetId}`)\n\t\t}\n\n\t\tsprites[name] = [bounds.x, bounds.y, bounds.width, bounds.height, ext];\n\t}\n\n\t// write the image\n\tconst tmpId = _.snakeCase(spritesheetId);\n\tconst dir = `${path.dirname(saveTo)}/_${tmpId}`;\n\tconst target = `${dir}/${path.basename(saveTo)}`\n\tawait fs.mkdirp(dir);\n\tawait fs.writeFile(target, image, 'binary');\n}\n\n// check the last modified time for a file, if it exists\nfunction getModifiedTime(path) {\n\ttry { return fs.statSync(path).mtime || 0; }\n\tcatch (ex) { return 0 }\n}\n","import _ from 'lodash';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { getDirectoryContents, readYml, fileToKey } from './utils.js';\nimport { generateSpritesheet } from './generate-spritesheet.js';\nimport paths from './paths.js';\n\n/** generates a resource item */\nexport default async function generateResource(root, node, id, options) {\n\tconst { INPUT_DIR } = paths;\n\tconst hasSubdir = !!options.subdir;\n\tconst subdir = hasSubdir ? `${options.subdir}/` : '';\n\tconst pathId = `${subdir}${id}`;\n\tconst dir = path.resolve(`${INPUT_DIR}/${pathId}`);\n\tconst nodeId = options.nodeId || id;\n\t\n\t// if it's missing, don't bother\n\t// there will be a separate process to remove\n\t// files that no longer exist so cleanup is not required\n\tconst exists = await fs.exists(dir);\n\tif (!exists) return;\n\n\t// gather file contents\n\tconsole.log('[generating]', pathId);\n\tconst { images, markup } = await getDirectoryContents(dir, options);\n\n\t// copy all YML data\n\tconst data = { };\n\tfor (const item of markup) {\n\t\tconst contents = await readYml(item.path);\n\t\tconst key = fileToKey(item.path);\n\n\t\t// assign the data -- for a default index file, just assign the data\n\t\tif (key === 'index') Object.assign(data, contents);\n\t\telse data[key] = contents;\n\t}\n\n\t// save the data, if any\n\tif (_.some(data)) {\n\t\tnode[nodeId] = data;\n\t}\n\n\t// generate the spritesheet, if any\n\tif (_.some(images)) {\n\t\tconst { spritesheetName } = options;\n\t\tawait generateSpritesheet(root.spritesheets, id, spritesheetName, subdir, images);\n\t}\n\n}\n","import path from 'path';\nimport fs from 'fs-extra';\n\n/** handles checking a directory for content */\nexport default async function scanDirectory(source, options, action) {\n\n\t// doesn't exist yet\n\tconst exists = await fs.exists(source);\n\tif (!exists) return;\n\n\t// gather all sub folders\n\tconst dirs = await fs.readdir(source);\n\tfor (const dir of dirs) {\n\n\t\t// make sure it's not a hidden file and\n\t\t// is actually a directory\n\t\tconst location = path.resolve(`${source}/${dir}`);\n\t\tconst stat = await fs.stat(location);\n\t\tconst isHidden = dir[0] === '.';\n\t\tconst isDirectory = stat.isDirectory();\n\t\tconst allowType = isDirectory || (!isDirectory && options.allowFiles);\n\t\tconst allowHidden = !isHidden || (isHidden && options.allowHidden);\n\n\t\t// continue with this resource\n\t\tif (allowType && allowHidden) \n\t\t\tawait action(dir, location);\n\t}\n\n}","import path from 'path';\nimport paths from './paths.js';\nimport generateResource from './generate-resource.js';\nimport scanDirectory from './scan-directory.js';\n\n/** generates a resource from each item in a directory */\nexport default async function generateResourcesFromDirectory(root, node, id, options) {\n\tconst { INPUT_DIR } = paths;\n\tconst source = path.resolve(`${INPUT_DIR}/${id}`);\n\t\n\t// if the node is missing, create it\n\tif (!node) {\n\t\tnode = { };\n\t\troot[id] = node;\n\t}\n\n\t// process all diles in a directory\n\tawait scanDirectory(source, { }, async dir => {\n\t\tawait generateResource(root, node, dir, { nodeId: dir, subdir: id });\n\t});\n}","\nimport _ from 'lodash';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport getMP3Duration from 'get-mp3-duration';\nimport fluent from 'fluent-ffmpeg';\n\nimport { fileToKey } from './utils.js';\nimport paths from './paths.js';\nimport getMp3Duration from 'get-mp3-duration';\n\n// create sound sprites from \nexport default async function generateSoundSprites(root) {\n\tconst { INPUT_DIR, OUTPUT_DIR } = paths;\n\tconst dir = 'sounds';\n\tconst input = path.resolve(INPUT_DIR, dir)\n\n\t// collect possible sprites\n\tconst sprites = [ ];\n\tconst entries = await fs.readdir(input);\n\tfor (const entry of entries) {\n\t\t\n\t\t// filter out hidden files\n\t\tif (/^\\./i.test(entry)) continue;\n\t\t\n\t\t// check the file into\n\t\tconst file = path.resolve(input, entry);\n\t\tconst stat = await fs.stat(file);\n\n\t\t// if is an mp3 file\n\t\tif (isMP3(file)) {\n\t\t\tconst buffer = await fs.readFile(file);\n\t\t\tconst duration = getMP3Duration(buffer);\n\t\t\tsprites.push({ file, duration });\n\t\t}\n\t\t// is a directory -- check for more MP3 Files\n\t\telse if (stat.isDirectory()) {\n\t\t\tawait copyMP3s(`${dir}/${entry}`);\n\t\t}\n\n\t}\n\n\t// gather the paths to concat\n\tconst files = [ ];\n\tconst silence = path.resolve(INPUT_DIR, 'silence.mp3');\n\tconst silenceBuffer = await fs.readFile(silence);\n\tconst spacer = getMp3Duration(silenceBuffer);\n\n\t// calculate the sprite info\n\tlet duration = 0;\n\troot.sounds = { };\n\tfor (const sprite of sprites) { \n\n\t\t// save the file to use\n\t\tfiles.push(sprite.file, silence);\n\n\t\t// get the key\n\t\tconst key = fileToKey(sprite.file);\n\t\troot.sounds[key] = [ duration, sprite.duration ];\n\n\t\t// update the duration - include an\n\t\t// extra 100 ms for silence between sounds\n\t\tduration += sprite.duration + spacer;\n\t}\n\n\t// merge the files\n\tconst output = path.resolve(OUTPUT_DIR, `sounds/common.mp3`);\n\tawait mergeMP3FilesToOutput(output, files);\n\tconsole.log(`[audio] ${dir}/common.mp3`);\n}\n\n\n// copy and compress each MP3 in a directory\nasync function copyMP3s(dir) {\n\tconst { INPUT_DIR, OUTPUT_DIR } = paths;\n\tconst input = path.resolve(INPUT_DIR, dir);\n\tconst output = path.resolve(OUTPUT_DIR, dir);\n\n\tconst entries = await fs.readdir(input);\n\tfor (const entry of entries) {\n\n\t\t// ensure it's an mp3\n\t\tif (!isMP3(entry)) continue;\n\n\t\t// make the directory, if needed\n\t\tconst exists = await fs.exists(output);\n\t\tif (!exists) await fs.mkdirp(output);\n\n\t\t// copy the file\n\t\tconst source = path.resolve(input, entry);\n\t\tconst target = path.resolve(output, entry);\n\n\t\t// copy the compressed version\n\t\tawait copyAndCompressMP3(source, target);\n\t\tconsole.log(`[audio] ${dir}/${entry}`);\n\t}\n}\n\n// handles copying individual MP3 files\nasync function copyAndCompressMP3(input, output) {\n\treturn new Promise((resolve, reject) => {\n\t\tfluent()\n\n\t\t\t// get the file top copy\n\t\t\t.input(input)\n\t\t\n\t\t\t// handle events\n\t\t\t.on('end', resolve)\n\t\t\t.on('error', reject)\n\n\t\t\t// configure audio\n\t\t\t.audioBitrate(48)\n\t\t\t.audioChannels(1)\n\n\t\t\t// then merge it\n\t\t\t.mergeToFile(output);\n\t});\n}\n\n// merge all mp3 files into a single file\nasync function mergeMP3FilesToOutput(output, paths) {\n\treturn new Promise((resolve, reject) => {\n\t\t\n\t\t// prepare the command\n\t\tconst concat = fluent();\n\t\t\t\n\t\t// add all files\n\t\tfor (const path of paths)\n\t\t\tconcat.input(path);\n\n\t\t// export\n\t\tconcat\n\t\t\t// handle events\n\t\t\t.on('end', resolve)\n\t\t\t.on('error', reject)\n\n\t\t\t// configure audio\n\t\t\t.audioBitrate(48)\n\t\t\t.audioChannels(1)\n\n\t\t\t// then merge it\n\t\t\t.mergeToFile(output);\n\t});\n}\n\n// checks if a file is an MP3 file\nfunction isMP3(file) {\n\tconst base = path.basename(file);\n\treturn /\\.mp3$/i.test(base);\n}\n","import fs from 'fs-extra';\nimport paths from './paths.js';\nimport xml2js from 'xml2js';\nimport omgsvg from 'omgsvg/omgsvg.js';\nimport Bezier from 'bezier-js';\n\n\n/** uses the race-progress.svg file to calculate  */\nexport async function compileProgressPath() {\n\tconst { width, height, offsetX, offsetY, svg } = await extractFile();\n\tconst { points, distance } = extractPoints(svg);\n\treturn createProgress(points, distance, offsetY, height);\n}\n\n\n// reads in the svg data\nasync function extractFile() {\n\tconst { INPUT_DIR } = paths;\n\tconst source = await fs.readFile(`${INPUT_DIR}/race-progress.svg`);\n\tconst markup = source.toString();\n\tconst doc = await xml2js.parseStringPromise(markup);\n\n\t// search for content\n\tlet rect;\n\tlet path;\n\tfor (const id in doc.svg) {\n\t\tif (id === 'rect') rect = doc.svg[id];\n\t\telse if (id === 'path') path = doc.svg[id];\n\t}\n\n\t// gather data\n\t// library has arrays for each type and dollar sign\n\t// to access attributes\n\tconst offsetX = 0 | rect[0].$.x;\n\tconst offsetY = 0 | rect[0].$.y;\n\tconst width = 0 | rect[0].$.width;\n\tconst height = 0 | rect[0].$.height;\n\tconst svg = path[0].$.d;\n\n\treturn { width, height, offsetX, offsetY, svg };\n}\n\n\n// reads the svg path data points\nfunction extractPoints(svg) {\n\n\t// overall path definition\n\tconst points = [ ];\n\n\t// parse this path\n\tlet distance = 0;\n\tconst parsed = new omgsvg.SVGPathParser(svg);\n\twhile (parsed.seek_next_cmd()) {\n\t\tconst args = parsed.parse_cur_args();\n\t\tconst index = points.length;\n\n\t\t// this is the first point - nothing\n\t\t// needs to be done other than add it\n\t\tif (index === 0) {\n\t\t\tconst [ x, y ] = args;\n\t\t\tpoints.push({ isStart: true, points: args, x, y, dist: 0 });\n\t\t}\n\t\t// this is a line - get the total distance\n\t\telse if (args.length === 2) {\n\t\t\tconst previous = points[index - 1];\n\t\t\tconst [ x, y ] = args;\n\t\t\tconst dist = Math.hypot(previous.x - x, previous.y - y);\n\n\t\t\t// update the total length\n\t\t\tdistance += dist;\n\n\t\t\t// replace this command\n\t\t\tpoints.push({ isLine: true, points: args, x, y, dist });\n\t\t}\n\t\t// this uses 6 command points and is a bezier curve\n\t\telse if (args.length === 6) {\n\t\t\tconst previous = points[index - 1];\n\t\t\tconst [ cx1, cy1, cx2, cy2, x, y ] = args;\n\t\t\tconst curve = new Bezier(previous.x, previous.y, cx1, cy1, cx2, cy2, x, y);\n\t\t\tconst dist = curve.length();\n\n\t\t\t// update the total length\n\t\t\t// end = start + dist; \n\t\t\tdistance += dist;\n\n\t\t\t// replace this command\n\t\t\tpoints.push({ isBezier: true, points: args, x, y, dist, curve });\n\t\t}\n\t\t// no quadratic curves\n\t\telse if (args.length === 4) {\n\t\t\tthrow 'Quadradic curves are not supported';\n\t\t}\n\t}\n\n\treturn { points, distance };\n}\n\n\n// generate the progress from the svg path\nfunction createProgress(points, distance, offsetY, height) {\n\tconst progress = [ ];\n\n\t// normalizes each y-axis point as a percentage, so the lower\n\t// the y value is actually more progress\n\tconst normalizePoint = y => {\n\t\t// round the number to two decimal places\n\t\treturn (0 | (1 - ((y - offsetY) / height)) * 100) / 100;\n\t};\n\n\t// with the known length, calculate the points along each\n\t// path to account for their space. This also \n\tlet index = 1;\n\tlet max = 0;\n\tconst scale = 1;\n\tconst samples = 100 * scale;\n\n\t// calculate the preferred number of samples for the progress\n\twhile (max < samples) {\n\t\tconst current = points[index];\n\t\tconst segment = Math.round(samples * (current.dist / distance));\n\n\t\t// get the percentage distance\n\t\tmax += segment;\n\n\t\t// sample the required points for a curve\n\t\t// and save all y/axis values\n\t\tif (current.isBezier) {\n\t\t\tconst lut = current.curve.getLUT(segment);\n\t\t\tfor (const point of lut) {\n\t\t\t\tconst t = normalizePoint(point.y)\n\t\t\t\tprogress.push(t);\n\t\t\t}\n\t\t}\n\t\t// for a line, just interpolate the y position\n\t\telse if (current.isLine) {\n\t\t\tconst previous = points[index - 1];\n\t\t\tfor (let i = 0; i < segment; i++) {\n\t\t\t\tconst y = previous.y + ((current.y - previous.y) * (i / segment));\n\t\t\t\tconst t = normalizePoint(y);\n\t\t\t\tprogress.push(t);\n\t\t\t}\n\t\t}\n\t\t// shouldn't happen, but if the point type\n\t\t// is unexpected, complain about it\n\t\telse {\n\t\t\tthrow 'Unexpected point type in path'\n\t\t}\n\n\t\t// continue forward\n\t\tindex++;\n\t}\n\n\treturn progress;\n}","import _ from 'lodash';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport * as cache from './cache.js';\nimport paths, { replacePaths } from './paths.js';\n\n// resource generation approaches\nimport generateResource from './generate-resource.js';\nimport generateResourcesFromDirectory from './generate-resource-from-dir.js';\nimport scanDirectory from './scan-directory.js';\nimport generateSoundsSpritesheet from './generate-sounds-spritesheet.js';\nimport { compileProgressPath } from './compile-progress-path.js';\n\n// check if debugging mode should be used\nconst DEBUG = !!~process.argv.indexOf('--debug');\n\n/** handles compiling all resources in the repo folder */\nexport async function compile(inputDir, outputDir) {\n\t\n\t// change the input/output directories\n\tif (inputDir && outputDir) {\n\t\treplacePaths(inputDir, outputDir);\n\t}\n\n\t// prepare the data\n\tconst { INPUT_DIR, OUTPUT_DIR } = paths;\n\tconst exported = path.resolve(`${OUTPUT_DIR}/manifest.json`);\n\n\t// load the previous document into the cache\n\tawait cache.load(exported);\n\n\t// ensure directories\n\tawait fs.mkdirp(OUTPUT_DIR);\n\n\t// TODO: restore data\n\t// check for changes\n\tconst data = { };\n\tif (!('spritesheets' in data)) data.spritesheets = { };\n\tif (!('tracks' in data)) data.tracks = { };\n\n\t// start generating files\n\tawait generateResource(data, data, 'particles', { });\n\tawait generateResource(data, data, 'images', { });\n\tawait generateResource(data, data, 'animations', { });\n\tawait generateResource(data, data, 'emitters', { });\n\tawait generateResource(data, data, 'crowd', { });\n\t\n\t// generate resources that have sub files\n\tawait generateResourcesFromDirectory(data, data.trails, 'trails', { });\n\tawait generateResourcesFromDirectory(data, data.intro, 'intros', { });\n\tawait generateResourcesFromDirectory(data, data.nitros, 'nitros', { });\n\tawait generateResourcesFromDirectory(data, data.cars, 'cars', { });\n\tawait generateResourcesFromDirectory(data, data.namecards, 'namecards', { });\n\tawait generateResourcesFromDirectory(data, data.extras, 'extras', { });\n\n\t// tracks have variations so each directory should\n\t// be scanned to see all available types\n\tawait scanDirectory(`${INPUT_DIR}/tracks`, { }, async (trackName, fullTrackDir) => {\n\n\t\t// save the track node\n\t\tdata.tracks[trackName] = { };\n\n\t\t// create all variations\n\t\tawait scanDirectory(fullTrackDir, { }, async variant => {\n\t\t\tdata.tracks[trackName][variant] = { };\n\n\t\t\t// generate a resource per variation\n\t\t\tawait generateResource(data, data.tracks[trackName], variant, { \n\t\t\t\tsubdir: `tracks/${trackName}`\n\t\t\t});\n\t\t});\n\t});\n\n\n\t// create the sounds, if needed\n\tawait generateSoundsSpritesheet(data);\n\n\t// compile the path progress helper\n\tdata.progress = await compileProgressPath();\n\n\t// include animation data\n\tconst animations = await fs.readFile(`${INPUT_DIR}/crowd/animations.json`);\n\tdata.crowd = JSON.parse(animations.toString());\n\n\t// save the completed file\n\tconst generated = JSON.stringify(data, null, DEBUG ? 2 : null);\n\tconsole.log(`[export] ${exported}`);\n\tawait fs.writeFile(exported, generated);\n}\n","export { compile } from './compile.js';\nimport * as allUtils from './utils.js';\nexport const utils = allUtils;","import express from 'express';\nimport path from 'path';\nimport chokidir from 'chokidar';\nimport Bundler from 'parcel-bundler';\nimport { compile } from '../compile';\nimport Server from 'simple-websocket/server';\n\n// shared config\nlet CONFIG;\nlet ROOT;\n\n// web socket communication\nlet ws;\nlet connections = [ ];\n\n// kicks off the process\nexport async function serve(config) {\n\tCONFIG = config;\n\n\t// get the root of the nt-composer module\n\t// ???: search for package.json\n\tconst [ entry, script ] = process.argv;\n\tROOT = path.dirname(script);\n\n\t// if this was called as a binary, we need to resolve to\n\t// the root of the node module\n\t// NOTE: I don't normally do this, so I don't know the\n\t// best practices for something like this\n\tif (/\\.bin$/.test(ROOT)) {\n\t\tROOT = path.dirname(ROOT);\n\t\tROOT = path.resolve(ROOT, 'nt-composer');\n\t}\n\n\t// set some defaults\n\tif (isNaN(CONFIG.port) || CONFIG.port < 1000) CONFIG.port = 9999;\n\n\t// check for the development bundler\n\tlet bundler;\n\n\t// create the bundler which is just serving\n\t// the index html file\n\tif (config.dev) {\n\t\tconsole.log('[mode] using dev mode');\n\t\tbundler = new Bundler(`${ROOT}/preview/index.html`, {\n\t\t\toutDir: './.preview/client',\n\t\t\tsourceMaps: true,\n\t\t\tcache: false\n\t\t});\n\t}\n\n\t// create the app\n\tconst app = express();\n\n\t// communicate for websockets\n\tconfigureWebSockets();\n\n\t// use pre-compiled track/animator\n\tif (!config.dev) {\n\t\tapp.use(express.static(`${ROOT}/dist/client`));\n\t}\n\n\t// share the root to allow access to node_modules\n\t// primarily to allow access to source maps\n\tapp.use(express.static(`${ROOT}/node_modules`));\n\n\t// access to non-compiled assets\n\tapp.use(express.static(`${ROOT}/public`));\n\n\t// access to compiled assets and spritesheets\n\tapp.use(express.static(CONFIG.output));\n\n\t// wait for changes\n\tchokidir.watch(CONFIG.input)\n\t\t.on('add', queueCompileAssets)\n\t\t.on('change', queueCompileAssets)\n\t\t.on('unlink', queueCompileAssets);\n\n\t// inject parcel bundler\n\tif (config.dev) {\n\t\tapp.use(bundler.middleware());\n\t}\n\n\t// waits for assets to compile\n\tawait waitForAssets();\n\n\t// start listening\n\tconsole.log(`NT Previewer now ready at http://localhost:${CONFIG.port}`);\n\tapp.listen(CONFIG.port);\n\t\n}\n\n// prepares a socket handler to communicate when\n// assets are updated\nfunction configureWebSockets() {\n\n\t// create the server\n\tws = new Server({ port: CONFIG.port + 1 });\n\n\t// wait for connections\n\tws.on('connection', socket => {\n\n\t\t// cleanup\n\t\tsocket.on('end', () => {\n\t\t\tconst index = connections.indexOf(socket);\n\t\t\tconnections.splice(index, 1);\n\t\t});\n\n\t\t// add to active connections\n\t\tconnections.push(socket);\n\t});\n}\n\n// queues waiting for assets to finish compiling\nlet waitingForAssets;\nfunction waitForAssets() {\n\treturn new Promise(resolve => waitingForAssets = resolve);\n}\n\n// watch for changes\nlet pendingRefresh;\nfunction queueCompileAssets() {\n\tclearTimeout(pendingRefresh);\n\tpendingRefresh = setTimeout(compileAssets, 1000);\n}\n\n// send a message to active connections\nfunction notifyConnections(message) {\n\tfor (const socket of connections) {\n\t\ttry { socket.send(message); }\n\t\tcatch (ex) { }\n\t}\n}\n\n// kicks off the compile process\nasync function compileAssets() {\n\n\tconsole.log('\\n\\nCompiling assets\\n');\n\tnotifyConnections('pending');\n\n\t// wait for the compile\n\ttry {\n\t\tawait compile(CONFIG.input, CONFIG.output);\n\t\tnotifyConnections('refresh');\n\t\tconsole.log('\\nAssets compiled\\n\\n');\n\t}\n\tcatch (ex) {\n\t\tnotifyConnections('error');\n\t\tconsole.log('\\nAssets compile error\\n\\n');\n\t\tconsole.log(ex);\n\t}\n\t\n\t// ready to show\n\tif (waitingForAssets) {\n\t\twaitingForAssets();\n\t}\n}\n"]}