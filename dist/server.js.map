{"version":3,"sources":["../compile/cache.js","../compile/paths.js","../compile/utils.js","../compile/compression.json","../compile/create-sprite-padded-spritesheet.js","../compile/consts.js","../compile/generate-spritesheet.js","../compile/generate-resource.js","../compile/scan-directory.js","../compile/generate-resource-from-dir.js","../compile/generate-sounds-spritesheet.js","../compile/splitManifest.js","../compile/compile.js","../compile/index.js","server.js"],"names":["data","load","path","content","fs","readFile","parsed","JSON","parse","toString","Object","assign","ex","paths","exec","script","INPUT_DIR","OUTPUT_DIR","process","argv","resolve","replacePaths","inputDir","outputDir","readYml","exists","contents","yml","console","error","getDirectoryContents","dir","markup","images","files","readdir","file","source","stat","isDirectory","lastModified","mtime","ext","extname","ref","indexOf","push","asyncCallback","action","args","Promise","reject","err","res","fileToKey","_","snakeCase","basename","timeout","time","setTimeout","module","exports","jpeg_quality","png_max_palette_colors","createSpritePaddedSpritesheet","target","width","height","coordinates","padding","canvas","ctx","getContext","halfPadding","waiting","then","image","x","y","drawImage","all","buffer","toBuffer","fsx","writeFile","ASSET_TYPES","HASHED_ASSET_TYPES","ASSET_TYPE_SOURCES","trail","cars","fanfare","nametags","nitros","normalizeAssetTypeName","type","replace","normalizePublicKeyName","name","COMPRESSION_PARAMS","JPG_COMPRESSION_ARGS","PNG_COMPRESSION_ARGS","generateSpritesheet","spritesheets","nodeId","spritesheetName","subdir","isPublic","src","category","substr","length","key","includes","crypto","createHash","update","digest","basePath","pngPath","jpgPath","jpgs","filter","item","test","pngs","hasPngs","some","hasJpgs","generatedTimes","getModifiedTime","lastGenerated","expired","Math","min","apply","isNaN","log","existing","get","cache","sprites","version","Date","now","hasPng","createSpritesheetFromImages","hasJpg","tmpId","resourceDir","dirname","tmpDir","mkdirp","compress_force","statistic","autoupdate","jpg","engine","command","png","svg","gif","completed","moveSync","input","path_out_new","overwrite","removeSync","spritesheetId","saveTo","useSpriteAsPadding","map","properties","Spritesmith","run","bounds","Error","statSync","generateResource","root","node","id","options","pathId","public","scanDirectory","dirs","location","isHidden","allowType","allowFiles","allowHidden","generateResourcesFromDirectory","isMP3","generateSoundSprites","checkForUpdatedSounds","sounds","collections","items","generateCollectionSoundSprites","copyIndividualSounds","glob","ts","parseInt","mtimeMs","output","readdirSync","sound","copyFrom","copyAndCompressAudio","entries","entry","record","tmp","gap","generated","spritemap","start","end","compare","existsSync","copyTo","copyMP3s","on","audioBitrate","audioChannels","mergeToFile","splitManifest","manifest","remove","obj","standard","stringify","keys","DEBUG","VERSION","compile","exported","tracks","trails","intro","extras","trackName","fullTrackDir","variant","generateKeyMap","mapping","sources","config","hash","utils","allUtils","CONFIG","ROOT","ws","waitingForAssets","pendingRefresh","connections","serve","bundler","resources","port","dev","Bundler","outDir","sourceMaps","app","configureWebSockets","use","express","static","watch","queueCompileAssets","middleware","waitForAssets","listen","Server","socket","index","splice","clearTimeout","compileAssets","notifyConnections","message","send"],"mappings":"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","file":"server.js","sourceRoot":"../preview","sourcesContent":["import fs from 'fs-extra'\n\n/** the previous version of the file */\nexport const data = { }\n\n// tries to load the previous document, if any\nexport async function load (path) {\n  try {\n    const content = await fs.readFile(path)\n    const parsed = JSON.parse(content.toString())\n    Object.assign(data, parsed)\n    // wasn't able to restore the file\n  } catch (ex) { }\n}\n","import path from 'path';\nconst [ exec, script, INPUT_DIR, OUTPUT_DIR ] = (process.argv || [ ]);\n\n// get the root path\nconst paths = { \n\tOUTPUT_DIR: path.resolve(INPUT_DIR || ''),\n\tINPUT_DIR: path.resolve(OUTPUT_DIR || ''),\n};\n\nexport function replacePaths(inputDir, outputDir) {\n\tpaths.INPUT_DIR = inputDir;\n\tpaths.OUTPUT_DIR = outputDir;\n}\n\nexport default paths;","import _ from 'lodash';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport yml from 'js-yaml';\n\n/** reads a YML file */\nexport async function readYml(path) {\n\n\t// make sure this exists\n\tconst exists = await fs.exists(path);\n\tif (!exists) return null;\n\n\t// try and read the content\n\ttry {\n\t\tconst contents = await fs.readFile(path);\n\t\treturn yml.load(contents.toString());\n\t}\n\tcatch (ex) {\n\t\tconsole.error(`YAML Error in ${path}`);\n\t\tthrow ex;\n\t}\n}\n\n/** gather up contents for a directory */\nexport async function getDirectoryContents(dir) {\n\tlet markup = [ ];\n\tlet images = [ ];\n\n\t// get modified times for each file\n\tconst files = await fs.readdir(dir);\n\tfor (let file of files) {\n\n\t\t// get the source\n\t\tconst source = path.resolve(`${dir}/${file}`);\n\t\tconst stat = await fs.stat(source);\n\t\tconst isDirectory = stat.isDirectory();\n\t\tconst lastModified = +stat.mtime;\n\t\tconst ext = path.extname(file);\n\t\t\n\t\t// skip directories and hidden files\n\t\tif (isDirectory || file[0] === '.') continue;\n\n\t\t// add to the correct group\n\t\tconst ref = !!~['.yml', '.yaml'].indexOf(ext) ? markup\n\t\t\t: !!~['.jpg', '.jpeg', '.png'].indexOf(ext) ? images\n\t\t\t: null;\n\n\t\t// create the record\n\t\tif (ref) ref.push({ path: source, lastModified });\n\t}\n\n\treturn { markup, images };\n}\n\n/** perfoms a callback as an async call */\nexport async function asyncCallback(action, ...args) {\n\treturn new Promise((resolve, reject) => {\n\t\taction(...args, (err, ...res) => {\n\t\t\tif (err) reject(err);\n\t\t\telse resolve(...res);\n\t\t});\n\t});\n}\n\n/** generates a key from a file name or path */\nexport function fileToKey(file) {\n\treturn _.snakeCase(path.basename(file, path.extname(file)))\n}\n\n/** waits a specified time */\nexport async function timeout(time) {\n\treturn new Promise(resolve => {\n\t\tsetTimeout(resolve, time);\n\t});\n}","module.exports={jpeg_quality:80,png_max_palette_colors:128};","import * as fsx from 'fs-extra';\nimport { createCanvas, loadImage } from \"canvas\";\nimport { fileToKey } from \"./utils\";\n\n// generates a spritesheet that uses the sprite as padding\n// this is helpful when the rendering engine does a bad job\n// at preventing bleed on textures and you're not using\n// an image with transparency\nexport async function createSpritePaddedSpritesheet(target, width, height, coordinates, padding) {\n\tconst canvas = createCanvas(width, height);\n\tconst ctx = canvas.getContext('2d');\n\tconst halfPadding = padding / 2;\n\n\tconst waiting = [ ];\n\tfor (const file in coordinates) {\n\t\twaiting.push(\n\t\t\tloadImage(file).then(image => {\n\t\t\t\tconst { x, y, width, height } = coordinates[file];\n\n\t\t\t\t// render the bonus area and then draw the image\n\t\t\t\t// over the top\n\t\t\t\tctx.drawImage(image, x - halfPadding, y - halfPadding, width + padding, height + padding);\n\t\t\t\tctx.drawImage(image, x, y, width, height);\n\t\t\t}));\n\t}\n\n\t// wait for all drawings\n\tawait Promise.all(waiting);\n\n\t// save the final image\n\tconst buffer = canvas.toBuffer();\n\tawait fsx.writeFile(target, buffer);\n}","\nexport const ASSET_TYPES = [\n\t'nametags',\n\t'trails',\n\t'cars',\n\t'nitros',\n\t'fanfare'\n]\n\nexport const HASHED_ASSET_TYPES = [\n\t...ASSET_TYPES,\n\t'nametag',\n\t'trail',\n\t'car',\n\t'nitro',\n\t'fanfare'\n]\n\nexport const ASSET_TYPE_SOURCES = { \n\ttrail: 'trails', \n\tcars: 'cars', \n\tfanfare: 'fanfare', \n\tnametags: 'nametags', \n\tnitros: 'nitros' \n}\n\n// need to rename some paths to match\n// item types in the game\nexport function normalizeAssetTypeName(type) {\n    return type.replace(/^trails/, 'trail')\n      .replace(/^nitros/, 'nitros')\n      .replace(/^nametags/, 'nametags')\n      .replace(/^fanfares/, 'fanfare')\n}\n\nexport function normalizePublicKeyName(name) {\n\treturn name.replace(/namecards/, 'nametag')\n\t\t.replace(/nametags/, 'nametag')\n\t\t.replace(/nitros/, 'nitro')\n}","import _ from 'lodash'\nimport fs from 'fs-extra'\nimport path from 'path'\nimport Spritesmith from 'spritesmith'\nimport compressImages from 'compress-images'\n\nimport COMPRESSION_PARAMS from './compression.json'\nimport { fileToKey, asyncCallback, timeout } from './utils.js'\nimport paths from './paths.js'\nimport * as cache from './cache.js'\nimport { createSpritePaddedSpritesheet } from './create-sprite-padded-spritesheet'\nimport crypto from 'crypto';\nimport { HASHED_ASSET_TYPES, normalizeAssetTypeName, normalizePublicKeyName } from './consts'\n\n// compression args\nconst { jpeg_quality, png_max_palette_colors } = COMPRESSION_PARAMS\nconst JPG_COMPRESSION_ARGS = ['-quality', jpeg_quality]\nconst PNG_COMPRESSION_ARGS = [png_max_palette_colors, '-f', '--strip', '--skip-if-larger']\n\nexport async function generateSpritesheet (spritesheets, nodeId, spritesheetName, subdir, images, isPublic) {\n  const { OUTPUT_DIR } = paths\n  const src = `${subdir}${spritesheetName || nodeId}`\n  const category = subdir.substr(0, subdir.length - 1)\n\n  // check if requires obfuscation\n  let key = src\n  key = normalizeAssetTypeName(key)\n\n  // if hashing the type\n  if (HASHED_ASSET_TYPES.includes(category) && !isPublic) {\n    key = normalizePublicKeyName(key)\n    key = crypto.createHash('sha1').update(key).digest('hex')\n  }\n\n  // get the possible paths\n  const basePath = path.resolve(`${OUTPUT_DIR}/${src}`)\n  const pngPath = `${basePath}.png`\n  const jpgPath = `${basePath}.jpg`\n\n  // check for certain type\n  const jpgs = _.filter(images, item => /jpe?g$/i.test(item.path))\n  const pngs = _.filter(images, item => /png$/i.test(item.path))\n\n  // check for available images\n  const hasPngs = _.some(pngs)\n  const hasJpgs = _.some(jpgs)\n\n  // check each time, but only if the image type is expected\n  const generatedTimes = []\n  if (hasPngs) generatedTimes.push(getModifiedTime(pngPath))\n  if (hasJpgs) generatedTimes.push(getModifiedTime(jpgPath))\n  let lastGenerated = Math.min.apply(Math, generatedTimes)\n  if (isNaN(lastGenerated)) lastGenerated = 0\n\n  // if all of the images have a lower write time\n  // than the sprite sheet then we don't need to compile it again\n  let expired\n  for (const item of images) {\n    expired = expired || item.lastModified > lastGenerated\n  }\n\n  // check if forcing a release\n  // TODO: maybe move outside of this function\n  if (/release/i.test(process.argv)) {\n    console.log('[release] force generate', key)\n    expired = true;\n  }\n\n  // check and make sure the prior data is available\n  const existing = _.get(cache.data, 'spritesheets', { })[key]\n\n  // if it's not expired and we have the old info then\n  // we can just reuse it\n  if (!expired && existing) {\n    spritesheets[key] = existing\n    return\n  }\n\n  // notify of params\n  console.log(`New Compress Compression Params\n  jpeg_quality           : ${jpeg_quality}\n  png_max_palette_colors : ${png_max_palette_colors}`)\n\n  // save the new spritesheet location\n  const sprites = spritesheets[key] = { }\n  sprites.version = Date.now().toString(16)\n\n  // generate PNGs\n  if (hasPngs) {\n    sprites.hasPng = true\n    await createSpritesheetFromImages(src, sprites, pngs, pngPath)\n  }\n\n  // generate JPGs\n  if (hasJpgs) {\n    sprites.hasJpg = true\n    await createSpritesheetFromImages(src, sprites, jpgs, jpgPath, true)\n  }\n\n  // there seems to be some timing issues - give a moment to\n  // settle down before compressing - ideally, we can just\n  // pipe results eventually\n  await timeout(5000)\n\n  // verify the resource directory\n  const tmpId = _.snakeCase(src)\n  const resourceDir = `dist${path.dirname(basePath).substr(OUTPUT_DIR.length)}`\n  const tmpDir = `${resourceDir}/_${tmpId}`\n  await fs.mkdirp(resourceDir)\n\n  // compress resources\n  return new Promise((resolve, reject) => {\n    compressImages(\n      `${tmpDir}/*.{jpg,png}`, // input\n      `${resourceDir}/`, // output\n      {\n        compress_force: true,\n        statistic: true,\n        autoupdate: false\n      },\n      false, // ??\n      { jpg: { engine: 'mozjpeg', command: JPG_COMPRESSION_ARGS } },\n      { png: { engine: 'pngquant', command: PNG_COMPRESSION_ARGS } },\n      { svg: { engine: false, command: false } },\n      { gif: { engine: false, command: false } },\n\n      // finalize\n      async function (error, completed, statistic) {\n        // manual copy (no idea why, but this stopped working at some point)\n        if (completed) {\n          fs.moveSync(statistic.input, statistic.path_out_new, { overwrite: true })\n        }\n\n        // remove the temporary generation dir\n        fs.removeSync(tmpDir)\n\n        // check for errors\n        if (error) {\n          console.error(`Compression failure for ${resourceDir}`)\n          console.error(error)\n          resolve()\n          // compressed as expected\n        } else {\n          resolve()\n        }\n      })\n  })\n}\n\n// updates the spritesheet with image names\nasync function createSpritesheetFromImages (spritesheetId, sprites, images, saveTo, useSpriteAsPadding) {\n  const padding = 2\n\n  // convert to a spritesheet\n  const src = _.map(images, item => item.path)\n  const { image, coordinates, properties } = await asyncCallback(Spritesmith.run, { padding, src })\n  const ext = path.extname(saveTo).substr(1)\n\n  // simplify the output format\n  for (const file in coordinates) {\n    const bounds = coordinates[file]\n    const name = fileToKey(file)\n\n    // if this name already exists, then there's a conflict in\n    // names and needs to be stopped\n    if (sprites[name]) {\n      throw new Error(`Conflicting sprite name: ${name} in ${spritesheetId}`)\n    }\n\n    sprites[name] = [bounds.x, bounds.y, bounds.width, bounds.height, ext]\n  }\n\n  // write the image\n  const tmpId = _.snakeCase(spritesheetId)\n  const dir = `${path.dirname(saveTo)}/_${tmpId}`\n  const target = `${dir}/${path.basename(saveTo)}`\n  await fs.mkdirp(dir)\n\n  // create the padded version\n  if (useSpriteAsPadding) {\n    await createSpritePaddedSpritesheet(target, properties.width, properties.height, coordinates, padding)\n  }\n  // use the normal image\n  else {\n    await fs.writeFile(target, image, 'binary')\n  }\n}\n\n// check the last modified time for a file, if it exists\nfunction getModifiedTime (path) {\n  try {\n    return fs.statSync(path).mtime || 0\n  } catch (ex) {\n    return 0\n  }\n}\n","import _ from 'lodash'\nimport fs from 'fs-extra'\nimport path from 'path'\n\nimport { getDirectoryContents, readYml, fileToKey } from './utils.js'\nimport { generateSpritesheet } from './generate-spritesheet.js'\nimport paths from './paths.js'\n\n/** generates a resource item */\nexport default async function generateResource (root, node, id, options) {\n  const { INPUT_DIR } = paths\n  const hasSubdir = !!options.subdir\n  const subdir = hasSubdir ? `${options.subdir}/` : ''\n  const pathId = `${subdir}${id}`\n  const dir = path.resolve(`${INPUT_DIR}/${pathId}`)\n  const nodeId = options.nodeId || id\n\n  // if it's missing, don't bother\n  // there will be a separate process to remove\n  // files that no longer exist so cleanup is not required\n  const exists = await fs.exists(dir)\n  if (!exists) return\n\n  // gather file contents\n  console.log('[generating]', pathId)\n  const { images, markup } = await getDirectoryContents(dir, options)\n\n  // copy all YML data\n  const data = { }\n  for (const item of markup) {\n    const contents = await readYml(item.path)\n    const key = fileToKey(item.path)\n\n    // assign the data -- for a default index file, just assign the data\n    if (key === 'index') Object.assign(data, contents)\n    else data[key] = contents\n  }\n\n  // save the data, if any\n  if (_.some(data)) {\n    node[nodeId] = data\n  }\n\n  // generate the spritesheet, if any\n  if (_.some(images)) {\n    const { spritesheetName } = options\n    const isPublic = !!data?.public\n    await generateSpritesheet(root.spritesheets, id, spritesheetName, subdir, images, isPublic)\n  }\n}\n","import path from 'path';\nimport fs from 'fs-extra';\n\n/** handles checking a directory for content */\nexport default async function scanDirectory(source, options, action) {\n\n\t// doesn't exist yet\n\tconst exists = await fs.exists(source);\n\tif (!exists) return;\n\n\t// gather all sub folders\n\tconst dirs = await fs.readdir(source);\n\tfor (const dir of dirs) {\n\n\t\t// make sure it's not a hidden file and\n\t\t// is actually a directory\n\t\tconst location = path.resolve(`${source}/${dir}`);\n\t\tconst stat = await fs.stat(location);\n\t\tconst isHidden = dir[0] === '.';\n\t\tconst isDirectory = stat.isDirectory();\n\t\tconst allowType = isDirectory || (!isDirectory && options.allowFiles);\n\t\tconst allowHidden = !isHidden || (isHidden && options.allowHidden);\n\n\t\t// continue with this resource\n\t\tif (allowType && allowHidden) \n\t\t\tawait action(dir, location);\n\t}\n\n}","import path from 'path';\nimport paths from './paths.js';\nimport generateResource from './generate-resource.js';\nimport scanDirectory from './scan-directory.js';\n\n/** generates a resource from each item in a directory */\nexport default async function generateResourcesFromDirectory(root, node, id, options) {\n\tconst { INPUT_DIR } = paths;\n\tconst source = path.resolve(`${INPUT_DIR}/${id}`);\n\t\n\t// if the node is missing, create it\n\tif (!node) {\n\t\tnode = { };\n\t\troot[id] = node;\n\t}\n\n\t// process all diles in a directory\n\tawait scanDirectory(source, { }, async dir => {\n\t\tawait generateResource(root, node, dir, { nodeId: dir, subdir: id });\n\t});\n}","import fs from 'fs-extra'\nimport path from 'path'\nimport fluent from 'fluent-ffmpeg'\nimport audiosprite from 'audiosprite'\nimport paths from './paths.js'\nimport glob from 'glob'\nimport { equalFiles } from 'file-sync-cmp'\nimport { asyncCallback } from './utils.js'\n\nconst isMP3 = path => /\\.mp3$/i.test(path)\n\nexport default async function generateSoundSprites (root, cache) {\n  // check for new sounds to compile\n  const hasUpdatedSounds = await checkForUpdatedSounds(cache)\n  if (!hasUpdatedSounds) {\n    root.sounds = cache.data.sounds\n    return\n  }\n\n  root.sounds = { }\n\n  // find all collections of audio\n  const { INPUT_DIR } = paths\n  const dir = 'sounds/collections'\n  const collections = path.resolve(INPUT_DIR, dir)\n  const items = await fs.readdir(collections);\n\n  // generate each unique sound spritesheet\n  for (const name of items) {\n    const location = path.resolve(collections, name)\n    const stat = await fs.stat(location)\n    if (stat.isDirectory() && !/^\\./.test(name)) {\n      await generateCollectionSoundSprites(root, name, location)\n    }\n  }\n\n  // copy other individual sounds\n  await copyIndividualSounds(root)\n}\n\nasync function checkForUpdatedSounds(cache) {\n  const { INPUT_DIR } = paths\n  const files = await asyncCallback(glob, `${INPUT_DIR}/sounds/**/*.mp3`)\n  \n  // find the latest timestamp\n  const ts = parseInt(cache.data?.version, '16')\n\n  // see if anything is newer\n  for (const file of files) {\n    const stat = fs.statSync(file)\n    if (stat.mtimeMs > ts) {\n      return true\n    }\n  }\n\n  // nothing new\n  return false\n}\n\nasync function copyIndividualSounds(root) {\n  const { INPUT_DIR, OUTPUT_DIR } = paths\n  const dir = 'sounds'\n  const collections = path.resolve(INPUT_DIR, dir)\n  const items = await fs.readdir(collections);\n\n  // generate each unique sound spritesheet\n  for (const name of items) {\n    const location = path.resolve(collections, name)\n    const stat = await fs.stat(location)\n    if (stat.isDirectory() && name !== 'collections' && !/^\\./.test(name)) {\n      const type = path.basename(location);\n      const output = path.resolve(`${OUTPUT_DIR}/sounds/${type}`)\n\n      // check for mp3s\n      const files = fs.readdirSync(location).filter(item => /\\.mp3/i.test(item))\n      for (const file of files) {\n        const sound = file.replace(/\\.mp3$/, '');\n        const copyFrom = path.resolve(location, file)\n        const saveTo = path.resolve(output, file)\n        const fileStat = fs.statSync(copyFrom)\n\n        // find the latest timestamp\n        const ts = 0 | fileStat.mtimeMs.toString(16);\n        \n        // mark this as a sound that exists\n        const key = `${name}/${sound}`;\n        root.sounds[key] = ts;\n        \n        // write the file\n        console.log('[sound]', key)\n        copyAndCompressAudio(copyFrom, saveTo)\n      }\n    }\n  }\n}\n\nasync function generateCollectionSoundSprites(root, name, location) {\n  const { OUTPUT_DIR } = paths\n\n  // collect possible sprites\n  const files = []\n  const entries = await fs.readdir(location)\n  for (const entry of entries) {\n    // filter out hidden files\n    if (/^\\./i.test(entry)) continue\n\n    // check the file info\n    const file = path.resolve(location, entry)\n\n    // if is an mp3 file\n    if (isMP3(file)) {\n      files.push(file)\n    }\n  }\n  \n  // create the sound record\n  const record = root.sounds[name] = { }\n\n  // check for required files\n  return new Promise((resolve, reject) => {\n    const tmp = path.resolve('./.compiled-audio')\n    const output = path.resolve(OUTPUT_DIR, 'sounds')\n    const options = {\n      gap: 0.5,\n      output: `${tmp}/${name}`\n    }\n\n    // create the spritesheet\n    audiosprite(files, options, async (err, generated) => {\n      if (err) {\n        return reject(err)\n      }\n\n      // map all audio files\n      for (const id in generated.spritemap) {\n        const sound = generated.spritemap[id]\n        record[id] = [0 | sound.start * 1000, 0 | (sound.end - sound.start) * 1000]\n      }\n\n      // compare the spritesheets to determine if they\n      // changed, and if so, update the timestamp\n      const source = `${tmp}/${name}.mp3`\n      const compare = `${output}/${name}.mp3`\n      const hasExisting = fs.existsSync(compare)\n      const same = hasExisting && equalFiles(source, compare)\n      if (!same) {\n        record.version = Date.now().toString('16')\n        console.log(`[audio] updated version: ${name}.mp3`)\n\n        // copy and compress each\n        const files = fs.readdirSync(tmp)\n        for (const file of files) {\n          const copyFrom = path.resolve(tmp, file)\n          const copyTo = path.resolve(output, file)\n          await copyAndCompressAudio(copyFrom, copyTo)\n        }\n      }\n\n      resolve()\n    })\n  })\n}\n\n// copy and compress each MP3 in a directory\nasync function copyMP3s(root, dir, { input, output }) {\n  const { INPUT_DIR, OUTPUT_DIR } = paths\n  \n  if (!input) {\n    input = path.resolve(INPUT_DIR, dir)\n  }\n\n  if (!output) {\n    output = path.resolve(OUTPUT_DIR, dir)\n  }\n\n  const entries = await fs.readdir(input)\n  for (const entry of entries) {\n    // ensure it's an mp3\n    if (!isMP3(entry)) continue\n\n    // make the directory, if needed\n    const exists = await fs.exists(output)\n    if (!exists) await fs.mkdirp(output)\n\n    // copy the file\n    const key = `${dir}/${entry}`;\n    const source = path.resolve(input, entry)\n    const target = path.resolve(output, entry)\n    const stat = await fs.stat(source)\n\n    // copy the compressed version\n    root.sounds[key] = stat.mtime.toString('16')\n    await copyAndCompressAudio(source, target)\n    console.log(`[audio] ${key}`)\n  }\n}\n\n// handles copying individual MP3 files\nasync function copyAndCompressAudio(input, output) {\n  return new Promise((resolve, reject) => {\n    fluent()\n\n      // get the file top copy\n      .input(input)\n\n      // handle events\n      .on('end', resolve)\n      .on('error', reject)\n\n      // configure audio\n      .audioBitrate(48)\n      .audioChannels(1)\n\n      // then merge it\n      .mergeToFile(output)\n  })\n}\n","import fs from 'fs-extra'\nimport path from 'path'\nimport { ASSET_TYPES } from './consts'\n\nexport default async function splitManifest ({ manifest, outputDir }) {\n  // save each asset type as a separate file\n  for (const type of ASSET_TYPES) {\n    console.log(`[manifest] creating external manifests for ${type}`)\n    const dir = path.resolve(outputDir, `./${type}`)\n\n    // remove all existing JSON files first\n    if (fs.existsSync(dir)) {\n      const files = await fs.readdir(dir)\n      for (const file of files) {\n        if (path.extname(file) === '.json') {\n          const remove = path.resolve(dir, file)\n          await fs.remove(remove)\n        }\n      }\n    }\n\n    // copy each type into its own file\n    for (const id in manifest[type]) {\n      const obj = manifest[type][id]\n\n      // is standard and should be included\n      // in the default manifest\n      if (obj.standard) {\n        continue\n      }\n\n      // should be dynamically loaded\n      const output = JSON.stringify(obj)\n      const target = path.resolve(`${dir}/${id}.json`)\n      await fs.writeFile(target, output)\n\n      // remove this item\n      delete manifest[type][id]\n    }\n\n    // remove the manifest section if nothing remains\n    if (Object.keys(manifest[type]).length === 0) {\n      delete manifest[type]\n    }\n  }\n}\n","import fs from 'fs-extra'\nimport path from 'path'\nimport * as cache from './cache.js'\nimport paths, { replacePaths } from './paths.js'\nimport crypto from 'crypto'\n\n// resource generation approaches\nimport generateResource from './generate-resource.js'\nimport generateResourcesFromDirectory from './generate-resource-from-dir.js'\nimport scanDirectory from './scan-directory.js'\nimport generateSoundsSpritesheet from './generate-sounds-spritesheet.js'\nimport splitManifest from './splitManifest.js'\nimport { ASSET_TYPE_SOURCES, normalizeAssetTypeName, normalizePublicKeyName } from './consts.js'\n\n// check if debugging mode should be used\nconst DEBUG = !!~process.argv.indexOf('--debug')\nconst VERSION = '1.5.2'\n\n/** handles compiling all resources in the repo folder */\nexport async function compile (inputDir, outputDir) {\n  // it's somewhat difficult to ensure the composer is\n  // the correct version when used from different repos\n  // this will make it known which version is being run\n  console.log(`nt-composer: v${VERSION}`)\n\n  // change the input/output directories\n  if (inputDir && outputDir) {\n    replacePaths(inputDir, outputDir)\n  }\n\n  // prepare the data\n  const { INPUT_DIR, OUTPUT_DIR } = paths\n  const exported = path.resolve(`${OUTPUT_DIR}/manifest.json`)\n\n  // load the previous document into the cache\n  await cache.load(exported)\n\n  // ensure directories\n  await fs.mkdirp(OUTPUT_DIR)\n\n  // TODO: restore data\n  // check for changes\n  const data = { }\n  if (!('spritesheets' in data)) data.spritesheets = { }\n  if (!('tracks' in data)) data.tracks = { }\n\n  // start generating files\n  await generateResource(data, data, 'particles', { })\n  await generateResource(data, data, 'images', { })\n  await generateResource(data, data, 'animations', { })\n  await generateResource(data, data, 'emitters', { })\n  await generateResource(data, data, 'crowd', { })\n\n  // generate resources that have sub files\n  await generateResourcesFromDirectory(data, data.trails, 'trails', { })\n  await generateResourcesFromDirectory(data, data.intro, 'intros', { })\n  await generateResourcesFromDirectory(data, data.nitros, 'nitros', { })\n  await generateResourcesFromDirectory(data, data.cars, 'cars', { })\n  await generateResourcesFromDirectory(data, data.nametags, 'nametags', { })\n  await generateResourcesFromDirectory(data, data.fanfare, 'fanfare', { })\n  await generateResourcesFromDirectory(data, data.extras, 'extras', { })\n\n  // tracks have variations so each directory should\n  // be scanned to see all available types\n  await scanDirectory(`${INPUT_DIR}/tracks`, { }, async (trackName, fullTrackDir) => {\n    // save the track node\n    data.tracks[trackName] = { }\n\n    // create all variations\n    await scanDirectory(fullTrackDir, { }, async variant => {\n      data.tracks[trackName][variant] = { }\n\n      // generate a resource per variation\n      await generateResource(data, data.tracks[trackName], variant, {\n        subdir: `tracks/${trackName}`\n      })\n    })\n  })\n\n  // create the sounds, if needed\n  await generateSoundsSpritesheet(data, cache)\n\n  // save a version number to force manifest files\n  // to reload with\n  data.version = Date.now().toString('16')\n\n  // break up non-required manifest data\n  await splitManifest({ manifest: data, outputDir: OUTPUT_DIR })\n\n  // create a keymap for local development\n  await generateKeyMap()\n\n  // save the completed file\n  const output = JSON.stringify(data, null, DEBUG ? 2 : null)\n  console.log(`[export] ${exported}`)\n  await fs.writeFile(exported, output)\n}\n\n\nasync function generateKeyMap() {\n  const { INPUT_DIR, OUTPUT_DIR } = paths\n\n  const mapping = { }\n  const sources = ASSET_TYPE_SOURCES\n  for (const key in sources) {\n    const src = sources[key]\n    mapping[src] = { }\n\n    const dir = path.resolve(`${INPUT_DIR}/${src}`)\n    const files = await fs.readdir(dir)\n    for (const file of files) {\n      \n      // verify this is an actual resource\n      const config = `${dir}/${file}/index.yml`\n      if (!fs.existsSync(config)) {\n        console.log('not', config)\n        continue\n      }\n\n      // save the mapping\n      const ref = `${normalizePublicKeyName(normalizeAssetTypeName(key))}/${file}`\n      const hash = crypto.createHash('sha1').update(ref).digest('hex')\n      mapping[src][hash] = file\n    }\n  }\n\n  // save the result\n  const output = path.resolve(`${OUTPUT_DIR}/mapping.json`)\n  const data = JSON.stringify(mapping)\n  await fs.writeFile(output, data)\n}\n","export { compile } from './compile.js';\nimport * as allUtils from './utils.js';\nexport const utils = allUtils;","import express from 'express';\nimport path from 'path';\nimport chokidir from 'chokidar';\nimport Bundler from 'parcel-bundler';\nimport { compile } from '../compile';\nimport Server from 'simple-websocket/server';\n\n// shared config\nlet CONFIG;\nlet ROOT;\n\n// web socket communication\nlet ws;\nlet connections = [ ];\n\n// kicks off the process\nexport async function serve(config) {\n\tCONFIG = config;\n\n\t// get the root of the nt-composer module\n\t// ???: search for package.json\n\t// const [ entry, script ] = process.argv;\n\tROOT = path.dirname(config.resources);\n\n\t// if this was called as a binary, we need to resolve to\n\t// the root of the node module\n\t// NOTE: I don't normally do this, so I don't know the\n\t// best practices for something like this\n\tif (/\\.bin$/.test(ROOT)) {\n\t\tROOT = path.dirname(ROOT);\n\t\tROOT = path.resolve(ROOT, 'nt-composer');\n\t}\n\n\t// set some defaults\n\tif (isNaN(CONFIG.port) || CONFIG.port < 1000) CONFIG.port = 9999;\n\n\t// check for the development bundler\n\tlet bundler;\n\n\t// create the bundler which is just serving\n\t// the index html file\n\tif (config.dev) {\n\t\tconsole.log('[server mode] using dev mode');\n\t\tbundler = new Bundler(`${ROOT}/preview/index.html`, {\n\t\t\toutDir: './.preview/client',\n\t\t\tsourceMaps: true,\n\t\t\tcache: false\n\t\t});\n\t}\n\t\n\t// create the app\n\tconst app = express();\n\t\n\t// communicate for websockets\n\tconfigureWebSockets();\n\t\n\t// use pre-compiled track/animator\n\tif (!config.dev) {\n\t\tapp.use(express.static(`${ROOT}/dist/client`));\n\t}\n\t// precompiled\n\telse {\n\t\tapp.use(express.static('./.preview/client'));\n\t\tapp.use(express.static(`${ROOT}/dist`));\n\t}\n\n\t// share the root to allow access to node_modules\n\t// primarily to allow access to source maps\n\tapp.use(express.static(`${ROOT}/node_modules`));\n\n\t// access to non-compiled assets\n\tapp.use(express.static(`${ROOT}/public`));\n\n\t// access to compiled assets and spritesheets\n\tapp.use(express.static(CONFIG.output));\n\n\t// wait for changes\n\tchokidir.watch(CONFIG.input)\n\t\t.on('add', queueCompileAssets)\n\t\t.on('change', queueCompileAssets)\n\t\t.on('unlink', queueCompileAssets);\n\n\t// inject parcel bundler\n\tif (config.dev) {\n\t\tapp.use(bundler.middleware());\n\t}\n\n\t// waits for assets to compile\n\tawait waitForAssets();\n\n\t// start listening\n\tconsole.log(`NT Previewer now ready at http://localhost:${CONFIG.port}`);\n\tapp.listen(CONFIG.port);\n\t\n}\n\n// prepares a socket handler to communicate when\n// assets are updated\nfunction configureWebSockets() {\n\n\t// create the server\n\tws = new Server({ port: CONFIG.port + 1 });\n\n\t// wait for connections\n\tws.on('connection', socket => {\n\n\t\t// cleanup\n\t\tsocket.on('end', () => {\n\t\t\tconst index = connections.indexOf(socket);\n\t\t\tconnections.splice(index, 1);\n\t\t});\n\n\t\t// add to active connections\n\t\tconnections.push(socket);\n\t});\n}\n\n// queues waiting for assets to finish compiling\nlet waitingForAssets;\nfunction waitForAssets() {\n\treturn new Promise(resolve => waitingForAssets = resolve);\n}\n\n// watch for changes\nlet pendingRefresh;\nfunction queueCompileAssets() {\n\tclearTimeout(pendingRefresh);\n\tpendingRefresh = setTimeout(compileAssets, 1000);\n}\n\n// send a message to active connections\nfunction notifyConnections(message) {\n\tfor (const socket of connections) {\n\t\ttry { socket.send(message); }\n\t\tcatch (ex) { }\n\t}\n}\n\n// kicks off the compile process\nasync function compileAssets() {\n\n\tconsole.log('\\n\\nCompiling assets\\n');\n\tnotifyConnections('pending');\n\n\t// wait for the compile\n\ttry {\n\t\tawait compile(CONFIG.input, CONFIG.output);\n\t\tnotifyConnections('refresh');\n\t\tconsole.log('\\nAssets compiled\\n\\n');\n\t}\n\tcatch (ex) {\n\t\tnotifyConnections('error');\n\t\tconsole.log('\\nAssets compile error\\n\\n');\n\t\tconsole.log(ex);\n\t}\n\t\n\t// ready to show\n\tif (waitingForAssets) {\n\t\twaitingForAssets();\n\t}\n}\n"]}