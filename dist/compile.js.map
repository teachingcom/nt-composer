{"version":3,"sources":["../compile/cache.js","../compile/paths.js","../compile/utils.js","../compile/compression.json","../compile/create-sprite-padded-spritesheet.js","../compile/generate-spritesheet.js","../compile/generate-resource.js","../compile/scan-directory.js","../compile/generate-resource-from-dir.js","../compile/generate-sounds-spritesheet.js","../compile/splitManifest.js","../compile/compile.js","../compile/index.js"],"names":["data","load","path","content","fs","readFile","parsed","JSON","parse","toString","Object","assign","ex","paths","exec","script","INPUT_DIR","OUTPUT_DIR","process","argv","resolve","replacePaths","inputDir","outputDir","readYml","exists","contents","yml","console","error","getDirectoryContents","dir","markup","images","files","readdir","file","source","stat","isDirectory","lastModified","mtime","ext","extname","ref","indexOf","push","asyncCallback","action","args","Promise","reject","err","res","fileToKey","_","snakeCase","basename","timeout","time","setTimeout","module","exports","jpeg_quality","png_max_palette_colors","createSpritePaddedSpritesheet","target","width","height","coordinates","padding","canvas","ctx","getContext","halfPadding","waiting","then","image","x","y","drawImage","all","buffer","toBuffer","fsx","writeFile","COMPRESSION_PARAMS","JPG_COMPRESSION_ARGS","PNG_COMPRESSION_ARGS","generateSpritesheet","spritesheets","nodeId","spritesheetName","subdir","src","key","test","replace","crypto","createHash","update","digest","basePath","pngPath","jpgPath","jpgs","filter","item","pngs","hasPngs","some","hasJpgs","generatedTimes","getModifiedTime","lastGenerated","expired","Math","min","apply","isNaN","log","existing","get","cache","sprites","version","Date","now","hasPng","createSpritesheetFromImages","hasJpg","tmpId","resourceDir","dirname","substr","length","tmpDir","mkdirp","compress_force","statistic","autoupdate","jpg","engine","command","png","svg","gif","completed","remove","spritesheetId","saveTo","useSpriteAsPadding","map","properties","Spritesmith","run","bounds","name","Error","statSync","generateResource","root","node","id","options","pathId","scanDirectory","dirs","location","isHidden","allowType","allowFiles","allowHidden","generateResourcesFromDirectory","isMP3","generateSoundSprites","checkForUpdatedSounds","sounds","collections","items","generateCollectionSoundSprites","glob","ts","parseInt","mtimeMs","copyIndividualSounds","copyMP3s","entries","entry","record","tmp","output","gap","generated","spritemap","sound","start","end","compare","existsSync","readdirSync","copyFrom","copyTo","copyAndCompressAudio","input","on","audioBitrate","audioChannels","mergeToFile","SECTIONS","splitManifest","manifest","type","obj","standard","stringify","keys","DEBUG","VERSION","compile","generateKeyMap","exported","tracks","trails","intro","nitros","cars","namecards","extras","trackName","fullTrackDir","variant","mapping","sources","trail","config","hash","utils","allUtils"],"mappings":"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","file":"compile.js","sourceRoot":"../compile","sourcesContent":["import fs from 'fs-extra'\n\n/** the previous version of the file */\nexport const data = { }\n\n// tries to load the previous document, if any\nexport async function load (path) {\n  try {\n    const content = await fs.readFile(path)\n    const parsed = JSON.parse(content.toString())\n    Object.assign(data, parsed)\n    // wasn't able to restore the file\n  } catch (ex) { }\n}\n","import path from 'path';\nconst [ exec, script, INPUT_DIR, OUTPUT_DIR ] = (process.argv || [ ]);\n\n// get the root path\nconst paths = { \n\tOUTPUT_DIR: path.resolve(INPUT_DIR || ''),\n\tINPUT_DIR: path.resolve(OUTPUT_DIR || ''),\n};\n\nexport function replacePaths(inputDir, outputDir) {\n\tpaths.INPUT_DIR = inputDir;\n\tpaths.OUTPUT_DIR = outputDir;\n}\n\nexport default paths;","import _ from 'lodash';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport yml from 'js-yaml';\n\n/** reads a YML file */\nexport async function readYml(path) {\n\n\t// make sure this exists\n\tconst exists = await fs.exists(path);\n\tif (!exists) return null;\n\n\t// try and read the content\n\ttry {\n\t\tconst contents = await fs.readFile(path);\n\t\treturn yml.load(contents.toString());\n\t}\n\tcatch (ex) {\n\t\tconsole.error(`YAML Error in ${path}`);\n\t\tthrow ex;\n\t}\n}\n\n/** gather up contents for a directory */\nexport async function getDirectoryContents(dir) {\n\tlet markup = [ ];\n\tlet images = [ ];\n\n\t// get modified times for each file\n\tconst files = await fs.readdir(dir);\n\tfor (let file of files) {\n\n\t\t// get the source\n\t\tconst source = path.resolve(`${dir}/${file}`);\n\t\tconst stat = await fs.stat(source);\n\t\tconst isDirectory = stat.isDirectory();\n\t\tconst lastModified = +stat.mtime;\n\t\tconst ext = path.extname(file);\n\t\t\n\t\t// skip directories and hidden files\n\t\tif (isDirectory || file[0] === '.') continue;\n\n\t\t// add to the correct group\n\t\tconst ref = !!~['.yml', '.yaml'].indexOf(ext) ? markup\n\t\t\t: !!~['.jpg', '.jpeg', '.png'].indexOf(ext) ? images\n\t\t\t: null;\n\n\t\t// create the record\n\t\tif (ref) ref.push({ path: source, lastModified });\n\t}\n\n\treturn { markup, images };\n}\n\n/** perfoms a callback as an async call */\nexport async function asyncCallback(action, ...args) {\n\treturn new Promise((resolve, reject) => {\n\t\taction(...args, (err, ...res) => {\n\t\t\tif (err) reject(err);\n\t\t\telse resolve(...res);\n\t\t});\n\t});\n}\n\n/** generates a key from a file name or path */\nexport function fileToKey(file) {\n\treturn _.snakeCase(path.basename(file, path.extname(file)))\n}\n\n/** waits a specified time */\nexport async function timeout(time) {\n\treturn new Promise(resolve => {\n\t\tsetTimeout(resolve, time);\n\t});\n}","module.exports={jpeg_quality:80,png_max_palette_colors:128};","import * as fsx from 'fs-extra';\nimport { createCanvas, loadImage } from \"canvas\";\nimport { fileToKey } from \"./utils\";\n\n// generates a spritesheet that uses the sprite as padding\n// this is helpful when the rendering engine does a bad job\n// at preventing bleed on textures and you're not using\n// an image with transparency\nexport async function createSpritePaddedSpritesheet(target, width, height, coordinates, padding) {\n\tconst canvas = createCanvas(width, height);\n\tconst ctx = canvas.getContext('2d');\n\tconst halfPadding = padding / 2;\n\n\tconst waiting = [ ];\n\tfor (const file in coordinates) {\n\t\twaiting.push(\n\t\t\tloadImage(file).then(image => {\n\t\t\t\tconst { x, y, width, height } = coordinates[file];\n\n\t\t\t\t// render the bonus area and then draw the image\n\t\t\t\t// over the top\n\t\t\t\tctx.drawImage(image, x - halfPadding, y - halfPadding, width + padding, height + padding);\n\t\t\t\tctx.drawImage(image, x, y, width, height);\n\t\t\t}));\n\t}\n\n\t// wait for all drawings\n\tawait Promise.all(waiting);\n\n\t// save the final image\n\tconst buffer = canvas.toBuffer();\n\tawait fsx.writeFile(target, buffer);\n}","import _ from 'lodash'\nimport fs from 'fs-extra'\nimport path from 'path'\nimport Spritesmith from 'spritesmith'\nimport compressImages from 'compress-images'\n\nimport COMPRESSION_PARAMS from './compression.json'\nimport { fileToKey, asyncCallback, timeout } from './utils.js'\nimport paths from './paths.js'\nimport * as cache from './cache.js'\nimport { createSpritePaddedSpritesheet } from './create-sprite-padded-spritesheet'\nimport crypto from 'crypto';\n\n// compression args\nconst { jpeg_quality, png_max_palette_colors } = COMPRESSION_PARAMS\nconst JPG_COMPRESSION_ARGS = ['-quality', jpeg_quality]\nconst PNG_COMPRESSION_ARGS = [png_max_palette_colors, '-f', '--strip', '--skip-if-larger']\n\nexport async function generateSpritesheet (spritesheets, nodeId, spritesheetName, subdir, images) {\n  const { OUTPUT_DIR } = paths\n  const src = `${subdir}${spritesheetName || nodeId}`\n\n  // check if requires obfuscation\n  let key = src;\n  if (/^(cars|trails|nitros)/.test(src)) {\n\n    // need to rename some paths to match\n    // item types in the game\n    key = key.replace(/^trails/, 'trail')\n      .replace(/^nitros/, 'nitro')\n      .replace(/^namecards/, 'namecard')\n\n    // the hashed version\n    key = crypto.createHash('sha1').update(key).digest('hex')\n  }\n\n  // get the possible paths\n  const basePath = path.resolve(`${OUTPUT_DIR}/${src}`)\n  const pngPath = `${basePath}.png`\n  const jpgPath = `${basePath}.jpg`\n\n  // check for certain type\n  const jpgs = _.filter(images, item => /jpe?g$/i.test(item.path))\n  const pngs = _.filter(images, item => /png$/i.test(item.path))\n\n  // check for available images\n  const hasPngs = _.some(pngs)\n  const hasJpgs = _.some(jpgs)\n\n  // check each time, but only if the image type is expected\n  const generatedTimes = []\n  if (hasPngs) generatedTimes.push(getModifiedTime(pngPath))\n  if (hasJpgs) generatedTimes.push(getModifiedTime(jpgPath))\n  let lastGenerated = Math.min.apply(Math, generatedTimes)\n  if (isNaN(lastGenerated)) lastGenerated = 0\n\n  // if all of the images have a lower write time\n  // than the sprite sheet then we don't need to compile it again\n  let expired\n  for (const item of images) {\n    expired = expired || item.lastModified > lastGenerated\n  }\n\n  // check if forcing a release\n  // TODO: maybe move outside of this function\n  if (/release/i.test(process.argv)) {\n    console.log('[release] force generate', key)\n    expired = true;\n  }\n\n  // check and make sure the prior data is available\n  const existing = _.get(cache.data, 'spritesheets', { })[key]\n\n  // if it's not expired and we have the old info then\n  // we can just reuse it\n  if (!expired && existing) {\n    spritesheets[key] = existing\n    return\n  }\n\n  // notify of params\n  console.log(`New Compress Compression Params\n  jpeg_quality           : ${jpeg_quality}\n  png_max_palette_colors : ${png_max_palette_colors}`)\n\n  // save the new spritesheet location\n  const sprites = spritesheets[key] = { }\n  sprites.version = Date.now().toString(16)\n\n  // generate PNGs\n  if (hasPngs) {\n    sprites.hasPng = true\n    await createSpritesheetFromImages(src, sprites, pngs, pngPath)\n  }\n\n  // generate JPGs\n  if (hasJpgs) {\n    sprites.hasJpg = true\n    await createSpritesheetFromImages(src, sprites, jpgs, jpgPath, true)\n  }\n\n  // there seems to be some timing issues - give a moment to\n  // settle down before compressing - ideally, we can just\n  // pipe results eventually\n  await timeout(500)\n\n  // verify the resource directory\n  const tmpId = _.snakeCase(src)\n  const resourceDir = `dist${path.dirname(basePath).substr(OUTPUT_DIR.length)}`\n  const tmpDir = `${resourceDir}/_${tmpId}`\n  await fs.mkdirp(resourceDir)\n\n  // compress resources\n  return new Promise((resolve, reject) => {\n    compressImages(\n      `${tmpDir}/*.{jpg,png}`, // input\n      `${resourceDir}/`, // output\n      {\n        compress_force: true,\n        statistic: true,\n        autoupdate: false\n      },\n      false, // ??\n      { jpg: { engine: 'mozjpeg', command: JPG_COMPRESSION_ARGS } },\n      { png: { engine: 'pngquant', command: PNG_COMPRESSION_ARGS } },\n      { svg: { engine: false, command: false } },\n      { gif: { engine: false, command: false } },\n\n      // finalize\n      async function (error, completed, statistic) {\n        // remove the temporary generation dir\n        fs.remove(tmpDir)\n\n        // check for errors\n        if (error) {\n          console.error(`Compression failure for ${resourceDir}`)\n          console.error(error)\n          resolve()\n          // compressed as expected\n        } else {\n          resolve()\n        }\n      })\n  })\n}\n\n// updates the spritesheet with image names\nasync function createSpritesheetFromImages (spritesheetId, sprites, images, saveTo, useSpriteAsPadding) {\n  const padding = 2\n\n  // convert to a spritesheet\n  const src = _.map(images, item => item.path)\n  const { image, coordinates, properties } = await asyncCallback(Spritesmith.run, { padding, src })\n  const ext = path.extname(saveTo).substr(1)\n\n  // simplify the output format\n  for (const file in coordinates) {\n    const bounds = coordinates[file]\n    const name = fileToKey(file)\n\n    // if this name already exists, then there's a conflict in\n    // names and needs to be stopped\n    if (sprites[name]) {\n      throw new Error(`Conflicting sprite name: ${name} in ${spritesheetId}`)\n    }\n\n    sprites[name] = [bounds.x, bounds.y, bounds.width, bounds.height, ext]\n  }\n\n  // write the image\n  const tmpId = _.snakeCase(spritesheetId)\n  const dir = `${path.dirname(saveTo)}/_${tmpId}`\n  const target = `${dir}/${path.basename(saveTo)}`\n  await fs.mkdirp(dir)\n\n  // create the padded version\n  if (useSpriteAsPadding) {\n    await createSpritePaddedSpritesheet(target, properties.width, properties.height, coordinates, padding)\n  }\n  // use the normal image\n  else {\n    await fs.writeFile(target, image, 'binary')\n  }\n}\n\n// check the last modified time for a file, if it exists\nfunction getModifiedTime (path) {\n  try {\n    return fs.statSync(path).mtime || 0\n  } catch (ex) {\n    return 0\n  }\n}\n","import _ from 'lodash'\nimport fs from 'fs-extra'\nimport path from 'path'\n\nimport { getDirectoryContents, readYml, fileToKey } from './utils.js'\nimport { generateSpritesheet } from './generate-spritesheet.js'\nimport paths from './paths.js'\n\n/** generates a resource item */\nexport default async function generateResource (root, node, id, options) {\n  const { INPUT_DIR } = paths\n  const hasSubdir = !!options.subdir\n  const subdir = hasSubdir ? `${options.subdir}/` : ''\n  const pathId = `${subdir}${id}`\n  const dir = path.resolve(`${INPUT_DIR}/${pathId}`)\n  const nodeId = options.nodeId || id\n\n  // if it's missing, don't bother\n  // there will be a separate process to remove\n  // files that no longer exist so cleanup is not required\n  const exists = await fs.exists(dir)\n  if (!exists) return\n\n  // gather file contents\n  console.log('[generating]', pathId)\n  const { images, markup } = await getDirectoryContents(dir, options)\n\n  // copy all YML data\n  const data = { }\n  for (const item of markup) {\n    const contents = await readYml(item.path)\n    const key = fileToKey(item.path)\n\n    // assign the data -- for a default index file, just assign the data\n    if (key === 'index') Object.assign(data, contents)\n    else data[key] = contents\n  }\n\n  // save the data, if any\n  if (_.some(data)) {\n    node[nodeId] = data\n  }\n\n  // generate the spritesheet, if any\n  if (_.some(images)) {\n    const { spritesheetName } = options\n    await generateSpritesheet(root.spritesheets, id, spritesheetName, subdir, images)\n  }\n}\n","import path from 'path';\nimport fs from 'fs-extra';\n\n/** handles checking a directory for content */\nexport default async function scanDirectory(source, options, action) {\n\n\t// doesn't exist yet\n\tconst exists = await fs.exists(source);\n\tif (!exists) return;\n\n\t// gather all sub folders\n\tconst dirs = await fs.readdir(source);\n\tfor (const dir of dirs) {\n\n\t\t// make sure it's not a hidden file and\n\t\t// is actually a directory\n\t\tconst location = path.resolve(`${source}/${dir}`);\n\t\tconst stat = await fs.stat(location);\n\t\tconst isHidden = dir[0] === '.';\n\t\tconst isDirectory = stat.isDirectory();\n\t\tconst allowType = isDirectory || (!isDirectory && options.allowFiles);\n\t\tconst allowHidden = !isHidden || (isHidden && options.allowHidden);\n\n\t\t// continue with this resource\n\t\tif (allowType && allowHidden) \n\t\t\tawait action(dir, location);\n\t}\n\n}","import path from 'path';\nimport paths from './paths.js';\nimport generateResource from './generate-resource.js';\nimport scanDirectory from './scan-directory.js';\n\n/** generates a resource from each item in a directory */\nexport default async function generateResourcesFromDirectory(root, node, id, options) {\n\tconst { INPUT_DIR } = paths;\n\tconst source = path.resolve(`${INPUT_DIR}/${id}`);\n\t\n\t// if the node is missing, create it\n\tif (!node) {\n\t\tnode = { };\n\t\troot[id] = node;\n\t}\n\n\t// process all diles in a directory\n\tawait scanDirectory(source, { }, async dir => {\n\t\tawait generateResource(root, node, dir, { nodeId: dir, subdir: id });\n\t});\n}","import fs from 'fs-extra'\nimport path from 'path'\nimport fluent from 'fluent-ffmpeg'\nimport audiosprite from 'audiosprite'\nimport paths from './paths.js'\nimport glob from 'glob'\nimport { equalFiles } from 'file-sync-cmp'\nimport { asyncCallback } from './utils.js'\n\nconst isMP3 = path => /\\.mp3$/i.test(path)\n\nexport default async function generateSoundSprites (root, cache) {\n  // check for new sounds to compile\n  const hasUpdatedSounds = await checkForUpdatedSounds(cache)\n  if (!hasUpdatedSounds) {\n    root.sounds = cache.data.sounds\n    return\n  }\n\n  root.sounds = { }\n\n  // find all collections of audio\n  const { INPUT_DIR } = paths\n  const dir = 'sounds/collections'\n  const collections = path.resolve(INPUT_DIR, dir)\n  const items = await fs.readdir(collections);\n\n  // generate each unique sound spritesheet\n  for (const name of items) {\n    const location = path.resolve(collections, name)\n    const stat = await fs.stat(location)\n    if (stat.isDirectory() && !/^\\./.test(name)) {\n      await generateCollectionSoundSprites(root, name, location)\n    }\n  }\n\n  // copy other individual sounds\n  // await copyIndividualSounds(root)\n}\n\nasync function checkForUpdatedSounds(cache) {\n  const { INPUT_DIR } = paths\n  const files = await asyncCallback(glob, `${INPUT_DIR}/sounds/**/*.mp3`)\n  \n  // find the latest timestamp\n  const ts = parseInt(cache.data?.version, '16')\n\n  // see if anything is newer\n  for (const file of files) {\n    const stat = fs.statSync(file)\n    if (stat.mtimeMs > ts) {\n      return true\n    }\n  }\n\n  // nothing new\n  return false\n}\n\nasync function copyIndividualSounds(root) {\n  const { INPUT_DIR, OUTPUT_DIR } = paths\n  const dir = 'sounds'\n  const collections = path.resolve(INPUT_DIR, dir)\n  const items = await fs.readdir(collections);\n\n  // generate each unique sound spritesheet\n  for (const name of items) {\n    const location = path.resolve(collections, name)\n    const stat = await fs.stat(location)\n    if (stat.isDirectory() && name !== 'collections' && !/^\\./.test(name)) {\n      await copyMP3s(root, location);\n    }\n  }\n}\n\nasync function generateCollectionSoundSprites(root, name, location) {\n  const { OUTPUT_DIR } = paths\n\n  // collect possible sprites\n  const files = []\n  const entries = await fs.readdir(location)\n  for (const entry of entries) {\n    // filter out hidden files\n    if (/^\\./i.test(entry)) continue\n\n    // check the file info\n    const file = path.resolve(location, entry)\n\n    // if is an mp3 file\n    if (isMP3(file)) {\n      files.push(file)\n    }\n  }\n  \n  // create the sound record\n  const record = root.sounds[name] = { }\n\n  // check for required files\n  return new Promise((resolve, reject) => {\n    const tmp = path.resolve('./.compiled-audio')\n    const output = path.resolve(OUTPUT_DIR, 'sounds')\n    const options = {\n      gap: 0.5,\n      output: `${tmp}/${name}`\n    }\n\n    // create the spritesheet\n    audiosprite(files, options, async (err, generated) => {\n      if (err) {\n        return reject(err)\n      }\n\n      // map all audio files\n      for (const id in generated.spritemap) {\n        const sound = generated.spritemap[id]\n        record[id] = [0 | sound.start * 1000, 0 | (sound.end - sound.start) * 1000]\n      }\n\n      // compare the spritesheets to determine if they\n      // changed, and if so, update the timestamp\n      const source = `${tmp}/${name}.mp3`\n      const compare = `${output}/${name}.mp3`\n      const hasExisting = fs.existsSync(compare)\n      const same = hasExisting && equalFiles(source, compare)\n      if (!same) {\n        record.version = Date.now().toString('16')\n        console.log(`[audio] updated version: ${name}.mp3`)\n\n        // copy and compress each\n        const files = fs.readdirSync(tmp)\n        for (const file of files) {\n          const copyFrom = path.resolve(tmp, file)\n          const copyTo = path.resolve(output, file)\n          await copyAndCompressAudio(copyFrom, copyTo)\n        }\n      }\n\n      resolve()\n    })\n  })\n}\n\n// copy and compress each MP3 in a directory\nasync function copyMP3s(root, dir) {\n  const { INPUT_DIR, OUTPUT_DIR } = paths\n  const input = path.resolve(INPUT_DIR, dir)\n  const output = path.resolve(OUTPUT_DIR, dir)\n\n  const entries = await fs.readdir(input)\n  for (const entry of entries) {\n    // ensure it's an mp3\n    if (!isMP3(entry)) continue\n\n    // make the directory, if needed\n    const exists = await fs.exists(output)\n    if (!exists) await fs.mkdirp(output)\n\n    // copy the file\n    const key = `${dir}/${entry}`;\n    const source = path.resolve(input, entry)\n    const target = path.resolve(output, entry)\n    const stat = await fs.stat(source)\n\n    // copy the compressed version\n    root.sounds[key] = stat.mtime.toString('16')\n    await copyAndCompressAudio(source, target)\n    console.log(`[audio] ${key}`)\n  }\n}\n\n// handles copying individual MP3 files\nasync function copyAndCompressAudio(input, output) {\n  return new Promise((resolve, reject) => {\n    fluent()\n\n      // get the file top copy\n      .input(input)\n\n      // handle events\n      .on('end', resolve)\n      .on('error', reject)\n\n      // configure audio\n      .audioBitrate(48)\n      .audioChannels(1)\n\n      // then merge it\n      .mergeToFile(output)\n  })\n}\n","import fs from 'fs-extra'\nimport path from 'path'\n\nconst SECTIONS = ['trails', 'nitros', 'cars', 'namecards']\n\nexport default async function splitManifest ({ manifest, outputDir }) {\n  // save each asset type as a separate file\n  for (const type of SECTIONS) {\n    console.log(`[manifest] creating external manifests for ${type}`)\n    const dir = path.resolve(outputDir, `./${type}`)\n\n    // remove all existing JSON files first\n    if (fs.existsSync(dir)) {\n      const files = await fs.readdir(dir)\n      for (const file of files) {\n        if (path.extname(file) === '.json') {\n          const remove = path.resolve(dir, file)\n          await fs.remove(remove)\n        }\n      }\n    }\n\n    // copy each type into its own file\n    for (const id in manifest[type]) {\n      const obj = manifest[type][id]\n\n      // is standard and shoul be included\n      // in the default manifest\n      if (obj.standard) {\n        continue\n      }\n\n      // should be dynamically loaded\n      const output = JSON.stringify(obj)\n      const target = path.resolve(`${dir}/${id}.json`)\n      await fs.writeFile(target, output)\n\n      // remove this item\n      delete manifest[type][id]\n    }\n\n    // remove the manifest section if nothing remains\n    if (Object.keys(manifest[type]).length === 0) {\n      delete manifest[type]\n    }\n  }\n}\n","import fs from 'fs-extra'\nimport path from 'path'\nimport * as cache from './cache.js'\nimport paths, { replacePaths } from './paths.js'\nimport crypto from 'crypto'\n\n// resource generation approaches\nimport generateResource from './generate-resource.js'\nimport generateResourcesFromDirectory from './generate-resource-from-dir.js'\nimport scanDirectory from './scan-directory.js'\nimport generateSoundsSpritesheet from './generate-sounds-spritesheet.js'\nimport splitManifest from './splitManifest.js'\n\n// check if debugging mode should be used\nconst DEBUG = !!~process.argv.indexOf('--debug')\nconst VERSION = '1.2.1'\n\n/** handles compiling all resources in the repo folder */\nexport async function compile (inputDir, outputDir) {\n  // it's somewhat difficult to ensure the composer is\n  // the correct version when used from different repos\n  // this will make it known which version is being run\n  console.log(`nt-composer: v${VERSION}`)\n\n  // change the input/output directories\n  if (inputDir && outputDir) {\n    replacePaths(inputDir, outputDir)\n  }\n\n\n  // create a keymap for local development\n  await generateKeyMap()\n\n  // prepare the data\n  const { INPUT_DIR, OUTPUT_DIR } = paths\n  const exported = path.resolve(`${OUTPUT_DIR}/manifest.json`)\n\n  // load the previous document into the cache\n  await cache.load(exported)\n\n  // ensure directories\n  await fs.mkdirp(OUTPUT_DIR)\n\n  // TODO: restore data\n  // check for changes\n  const data = { }\n  if (!('spritesheets' in data)) data.spritesheets = { }\n  if (!('tracks' in data)) data.tracks = { }\n\n  // start generating files\n  await generateResource(data, data, 'particles', { })\n  await generateResource(data, data, 'images', { })\n  await generateResource(data, data, 'animations', { })\n  await generateResource(data, data, 'emitters', { })\n  await generateResource(data, data, 'crowd', { })\n\n  // generate resources that have sub files\n  await generateResourcesFromDirectory(data, data.trails, 'trails', { })\n  await generateResourcesFromDirectory(data, data.intro, 'intros', { })\n  await generateResourcesFromDirectory(data, data.nitros, 'nitros', { })\n  await generateResourcesFromDirectory(data, data.cars, 'cars', { })\n  await generateResourcesFromDirectory(data, data.namecards, 'namecards', { })\n  await generateResourcesFromDirectory(data, data.extras, 'extras', { })\n\n  // tracks have variations so each directory should\n  // be scanned to see all available types\n  await scanDirectory(`${INPUT_DIR}/tracks`, { }, async (trackName, fullTrackDir) => {\n    // save the track node\n    data.tracks[trackName] = { }\n\n    // create all variations\n    await scanDirectory(fullTrackDir, { }, async variant => {\n      data.tracks[trackName][variant] = { }\n\n      // generate a resource per variation\n      await generateResource(data, data.tracks[trackName], variant, {\n        subdir: `tracks/${trackName}`\n      })\n    })\n  })\n\n  // create the sounds, if needed\n  await generateSoundsSpritesheet(data, cache)\n\n  // save a version number to force manifest files\n  // to reload with\n  data.version = Date.now().toString('16')\n\n  // break up non-required manifest data\n  await splitManifest({ manifest: data, outputDir: OUTPUT_DIR })\n\n  // save the completed file\n  const output = JSON.stringify(data, null, DEBUG ? 2 : null)\n  console.log(`[export] ${exported}`)\n  await fs.writeFile(exported, output)\n}\n\n\nasync function generateKeyMap() {\n  const { INPUT_DIR, OUTPUT_DIR } = paths\n\n  const mapping = { };\n  const sources = { trail: 'trails', cars: 'cars' }\n  for (const key in sources) {\n    const src = sources[key]\n    mapping[src] = { }\n\n    const dir = path.resolve(`${INPUT_DIR}/${src}`)\n    const files = await fs.readdir(dir)\n    for (const file of files) {\n      \n      // verify this is an actual resource\n      const config = `${dir}/${file}/index.yml`;\n      if (!fs.existsSync(config)) {\n        console.log('not', config)\n        continue\n      }\n\n      // save the mapping\n      const ref = `${key}/${file}`\n      const hash = crypto.createHash('sha1').update(ref).digest('hex')\n      mapping[src][hash] = file\n    }\n  }\n\n  // save the result\n  const output = path.resolve(`${OUTPUT_DIR}/mapping.json`)\n  const data = JSON.stringify(mapping)\n  await fs.writeFile(output, data)\n}\n","export { compile } from './compile.js';\nimport * as allUtils from './utils.js';\nexport const utils = allUtils;"]}