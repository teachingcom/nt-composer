{"version":3,"sources":["../compile/cache.js","../compile/paths.js","../compile/utils.js","../compile/compression.json","../compile/generate-spritesheet.js","../compile/generate-resource.js","../compile/scan-directory.js","../compile/generate-resource-from-dir.js","../compile/generate-sounds-spritesheet.js","../compile/compile.js","../compile/index.js"],"names":["data","load","path","content","fs","readFile","parsed","JSON","parse","toString","Object","assign","ex","paths","exec","script","INPUT_DIR","OUTPUT_DIR","process","argv","resolve","replacePaths","inputDir","outputDir","readYml","exists","contents","yml","console","error","getDirectoryContents","dir","markup","images","files","readdir","file","source","stat","isDirectory","lastModified","mtime","ext","extname","ref","indexOf","push","asyncCallback","action","args","Promise","reject","err","res","fileToKey","_","snakeCase","basename","timeout","time","setTimeout","module","exports","jpeg_quality","png_max_palette_colors","COMPRESSION_PARAMS","JPG_COMPRESSION_ARGS","PNG_COMPRESSION_ARGS","generateSpritesheet","spritesheets","nodeId","spritesheetName","subdir","spritesheetId","basePath","pngPath","jpgPath","jpgs","filter","item","test","pngs","hasPngs","some","hasJpgs","generatedTimes","getModifiedTime","lastGenerated","expired","Math","min","apply","isNaN","existing","get","cache","log","sprites","hasPng","createSpritesheetFromImages","hasJpg","tmpId","resourceDir","dirname","substr","length","tmpDir","mkdirp","compress_force","statistic","autoupdate","jpg","engine","command","png","svg","gif","completed","remove","saveTo","isTrack","padding","src","map","image","coordinates","Spritesmith","run","bounds","name","Error","x","y","width","height","target","writeFile","statSync","generateResource","root","node","id","options","pathId","key","scanDirectory","dirs","location","isHidden","allowType","allowFiles","allowHidden","generateResourcesFromDirectory","generateSoundSprites","input","entries","entry","isMP3","buffer","duration","copyMP3s","silence","silenceBuffer","spacer","sounds","sprite","output","mergeMP3FilesToOutput","copyAndCompressMP3","on","audioBitrate","audioChannels","mergeToFile","concat","base","DEBUG","VERSION","compile","exported","tracks","trails","intro","nitros","cars","namecards","extras","trackName","fullTrackDir","variant","generated","stringify","utils","allUtils"],"mappings":"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","file":"compile.js","sourceRoot":"../compile","sourcesContent":["import fs from 'fs-extra';\n\n/** the previous version of the file */\nexport const data = { };\n\n// tries to load the previous document, if any\nexport async function load(path) {\n\ttry {\n\t\tconst content = await fs.readFile(path);\n\t\tconst parsed = JSON.parse(content.toString());\n\t\tObject.assign(data, parsed);\n\t}\n\t// wasn't able to restore the file\n\tcatch (ex) { }\n}\n","import path from 'path';\nconst [ exec, script, INPUT_DIR, OUTPUT_DIR ] = (process.argv || [ ]);\n\n// get the root path\nconst paths = { \n\tOUTPUT_DIR: path.resolve(INPUT_DIR || ''),\n\tINPUT_DIR: path.resolve(OUTPUT_DIR || ''),\n};\n\nexport function replacePaths(inputDir, outputDir) {\n\tpaths.INPUT_DIR = inputDir;\n\tpaths.OUTPUT_DIR = outputDir;\n}\n\nexport default paths;","import _ from 'lodash';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport yml from 'js-yaml';\n\n/** reads a YML file */\nexport async function readYml(path) {\n\n\t// make sure this exists\n\tconst exists = await fs.exists(path);\n\tif (!exists) return null;\n\n\t// try and read the content\n\ttry {\n\t\tconst contents = await fs.readFile(path);\n\t\treturn yml.load(contents.toString());\n\t}\n\tcatch (ex) {\n\t\tconsole.error(`YAML Error in ${path}`);\n\t\tthrow ex;\n\t}\n}\n\n/** gather up contents for a directory */\nexport async function getDirectoryContents(dir) {\n\tlet markup = [ ];\n\tlet images = [ ];\n\n\t// get modified times for each file\n\tconst files = await fs.readdir(dir);\n\tfor (let file of files) {\n\n\t\t// get the source\n\t\tconst source = path.resolve(`${dir}/${file}`);\n\t\tconst stat = await fs.stat(source);\n\t\tconst isDirectory = stat.isDirectory();\n\t\tconst lastModified = +stat.mtime;\n\t\tconst ext = path.extname(file);\n\t\t\n\t\t// skip directories and hidden files\n\t\tif (isDirectory || file[0] === '.') continue;\n\n\t\t// add to the correct group\n\t\tconst ref = !!~['.yml', '.yaml'].indexOf(ext) ? markup\n\t\t\t: !!~['.jpg', '.jpeg', '.png'].indexOf(ext) ? images\n\t\t\t: null;\n\n\t\t// create the record\n\t\tif (ref) ref.push({ path: source, lastModified });\n\t}\n\n\treturn { markup, images };\n}\n\n/** perfoms a callback as an async call */\nexport async function asyncCallback(action, ...args) {\n\treturn new Promise((resolve, reject) => {\n\t\taction(...args, (err, ...res) => {\n\t\t\tif (err) reject(err);\n\t\t\telse resolve(...res);\n\t\t});\n\t});\n}\n\n/** generates a key from a file name or path */\nexport function fileToKey(file) {\n\treturn _.snakeCase(path.basename(file, path.extname(file)))\n}\n\n/** waits a specified time */\nexport async function timeout(time) {\n\treturn new Promise(resolve => {\n\t\tsetTimeout(resolve, time);\n\t});\n}","module.exports={jpeg_quality:80,png_max_palette_colors:128};","import _ from 'lodash';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport Spritesmith from 'spritesmith';\nimport compressImages from 'compress-images';\n\nimport COMPRESSION_PARAMS from './compression.json';\nimport { fileToKey, asyncCallback, timeout } from './utils.js';\nimport paths from './paths.js';\nimport * as cache from './cache.js';\n\n// compression args\nconst { jpeg_quality, png_max_palette_colors } = COMPRESSION_PARAMS;\nconst JPG_COMPRESSION_ARGS = ['-quality', jpeg_quality];\nconst PNG_COMPRESSION_ARGS = [png_max_palette_colors, '-f', '--strip', '--skip-if-larger'];\n\nexport async function generateSpritesheet(spritesheets, nodeId, spritesheetName, subdir, images) {\n\tconst { OUTPUT_DIR } = paths;\n\tconst spritesheetId = `${subdir}${spritesheetName || nodeId}`;\n\n\t// get the possible paths\n\tconst basePath = path.resolve(`${OUTPUT_DIR}/${spritesheetId}`);\n\tconst pngPath = `${basePath}.png`;\n\tconst jpgPath = `${basePath}.jpg`;\n\n\t// check for certain type\n\tconst jpgs = _.filter(images, item => /jpe?g$/i.test(item.path));\n\tconst pngs = _.filter(images, item => /png$/i.test(item.path));\n\n\t// check if \n\tconst hasPngs = _.some(pngs);\n\tconst hasJpgs = _.some(jpgs);\n\n\t// check each time, but only if the image type is expected\n\tconst generatedTimes = [ ];\n\tif (hasPngs) generatedTimes.push(getModifiedTime(pngPath));\n\tif (hasJpgs) generatedTimes.push(getModifiedTime(jpgPath));\n\tlet lastGenerated = Math.min.apply(Math, generatedTimes);\n\tif (isNaN(lastGenerated)) lastGenerated = 0;\n\n\t// if all of the images have a lower write time\n\t// than the sprite sheet then we don't need to compile it again\n\tlet expired;\n\tfor (const item of images) {\n\t\texpired = expired || item.lastModified > lastGenerated;\n\t}\n\n\t// check and make sure the prior data is available\n\tconst existing = _.get(cache.data, 'spritesheets', { })[spritesheetId];\n\t\n\t// if it's not expired and we have the old info then\n\t// we can just reuse it\n\tif (!expired && existing) {\n\t\tspritesheets[spritesheetId] = existing;\n\t\treturn;\n\t}\n\n\t// notify of params\n\tconsole.log(`New Compress Compression Params\n\tjpeg_quality           : ${jpeg_quality}\n\tpng_max_palette_colors : ${png_max_palette_colors}`);\n\n\t// save the new spritesheet location\n\tconst sprites = spritesheets[spritesheetId] = { };\n\n\t// generate PNGs\n\tif (hasPngs) {\n\t\tsprites.hasPng = true;\n\t\tawait createSpritesheetFromImages(spritesheetId, sprites, pngs, pngPath);\n\t}\n\t\n\t// generate JPGs\n\tif (hasJpgs) {\n\t\tsprites.hasJpg = true;\n\t\tawait createSpritesheetFromImages(spritesheetId, sprites, jpgs, jpgPath);\n\t}\n\t\n\t// there seems to be some timing issues - give a moment to \n\t// settle down before compressing - ideally, we can just\n\t// pipe results eventually\n\tawait timeout(500);\n\n\t// verify the resource directory\n\tconst tmpId = _.snakeCase(spritesheetId);\n\tconst resourceDir = `dist${path.dirname(basePath).substr(OUTPUT_DIR.length)}`;\n\tconst tmpDir = `${resourceDir}/_${tmpId}`;\n\tawait fs.mkdirp(resourceDir);\n\n\t// compress resources\n\treturn new Promise((resolve, reject) => {\n\t\tcompressImages(\n\t\t\t`${tmpDir}/*.{jpg,png}`, // input\n\t\t\t`${resourceDir}/`, // output\n\t\t\t{\n\t\t\t\tcompress_force: true,\n\t\t\t\tstatistic: true,\n\t\t\t\tautoupdate: false,\n\t\t\t},\n\t\t\tfalse, // ??\n\t\t\t{ jpg: {engine: 'mozjpeg', command: JPG_COMPRESSION_ARGS}},\n\t\t\t{ png: {engine: 'pngquant', command: PNG_COMPRESSION_ARGS}},\n\t\t\t{svg: {engine: false, command: false}},\n\t\t\t{gif: {engine: false, command: false}},\n\n\t\t\t// finalize\n\t\t\tasync function(error, completed, statistic){\n\n\t\t\t\t// remove the temporary generation dir\n\t\t\t\tfs.remove(tmpDir);\n\n\t\t\t\t// check for errors\n\t\t\t\tif (error) {\n\t\t\t\t\tconsole.error(`Compression failure for ${resourceDir}`);\n\t\t\t\t\tconsole.error(error);\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t\t// compressed as expected\n\t\t\t\telse resolve();\n\t\t\t});\n\t\t});\n}\n\n// updates the spritesheet with image names\nasync function createSpritesheetFromImages(spritesheetId, sprites, images, saveTo) {\n\n\t// this is not ideal, but for some reason\n\t// padding on tracks actually creates tears in\n\t// the road - this is a temp fix\n\tconst isTrack = /tracks\\//.test(saveTo);\n\tconst padding = isTrack ? 0 : 3;\n\n\t// convert to a spritesheet\n\tconst src = _.map(images, item => item.path);\n\tconst { image, coordinates } = await asyncCallback(Spritesmith.run, { padding, src });\n\tconst ext = path.extname(saveTo).substr(1);\n\t\n\t// simplify the output format\n\tfor (const file in coordinates) {\n\t\tconst bounds = coordinates[file];\n\t\tconst name = fileToKey(file);\n\n\t\t// if this name already exists, then there's a conflict in\n\t\t// names and needs to be stopped\n\t\tif (sprites[name]) {\n\t\t\tthrow new Error(`Conflicting sprite name: ${name} in ${spritesheetId}`)\n\t\t}\n\n\t\tsprites[name] = [bounds.x, bounds.y, bounds.width, bounds.height, ext];\n\t}\n\n\t// write the image\n\tconst tmpId = _.snakeCase(spritesheetId);\n\tconst dir = `${path.dirname(saveTo)}/_${tmpId}`;\n\tconst target = `${dir}/${path.basename(saveTo)}`\n\tawait fs.mkdirp(dir);\n\tawait fs.writeFile(target, image, 'binary');\n}\n\n// check the last modified time for a file, if it exists\nfunction getModifiedTime(path) {\n\ttry { return fs.statSync(path).mtime || 0; }\n\tcatch (ex) { return 0 }\n}\n","import _ from 'lodash';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { getDirectoryContents, readYml, fileToKey } from './utils.js';\nimport { generateSpritesheet } from './generate-spritesheet.js';\nimport paths from './paths.js';\n\n/** generates a resource item */\nexport default async function generateResource(root, node, id, options) {\n\tconst { INPUT_DIR } = paths;\n\tconst hasSubdir = !!options.subdir;\n\tconst subdir = hasSubdir ? `${options.subdir}/` : '';\n\tconst pathId = `${subdir}${id}`;\n\tconst dir = path.resolve(`${INPUT_DIR}/${pathId}`);\n\tconst nodeId = options.nodeId || id;\n\t\n\t// if it's missing, don't bother\n\t// there will be a separate process to remove\n\t// files that no longer exist so cleanup is not required\n\tconst exists = await fs.exists(dir);\n\tif (!exists) return;\n\n\t// gather file contents\n\tconsole.log('[generating]', pathId);\n\tconst { images, markup } = await getDirectoryContents(dir, options);\n\n\t// copy all YML data\n\tconst data = { };\n\tfor (const item of markup) {\n\t\tconst contents = await readYml(item.path);\n\t\tconst key = fileToKey(item.path);\n\n\t\t// assign the data -- for a default index file, just assign the data\n\t\tif (key === 'index') Object.assign(data, contents);\n\t\telse data[key] = contents;\n\t}\n\n\t// save the data, if any\n\tif (_.some(data)) {\n\t\tnode[nodeId] = data;\n\t}\n\n\t// generate the spritesheet, if any\n\tif (_.some(images)) {\n\t\tconst { spritesheetName } = options;\n\t\tawait generateSpritesheet(root.spritesheets, id, spritesheetName, subdir, images);\n\t}\n\n}\n","import path from 'path';\nimport fs from 'fs-extra';\n\n/** handles checking a directory for content */\nexport default async function scanDirectory(source, options, action) {\n\n\t// doesn't exist yet\n\tconst exists = await fs.exists(source);\n\tif (!exists) return;\n\n\t// gather all sub folders\n\tconst dirs = await fs.readdir(source);\n\tfor (const dir of dirs) {\n\n\t\t// make sure it's not a hidden file and\n\t\t// is actually a directory\n\t\tconst location = path.resolve(`${source}/${dir}`);\n\t\tconst stat = await fs.stat(location);\n\t\tconst isHidden = dir[0] === '.';\n\t\tconst isDirectory = stat.isDirectory();\n\t\tconst allowType = isDirectory || (!isDirectory && options.allowFiles);\n\t\tconst allowHidden = !isHidden || (isHidden && options.allowHidden);\n\n\t\t// continue with this resource\n\t\tif (allowType && allowHidden) \n\t\t\tawait action(dir, location);\n\t}\n\n}","import path from 'path';\nimport paths from './paths.js';\nimport generateResource from './generate-resource.js';\nimport scanDirectory from './scan-directory.js';\n\n/** generates a resource from each item in a directory */\nexport default async function generateResourcesFromDirectory(root, node, id, options) {\n\tconst { INPUT_DIR } = paths;\n\tconst source = path.resolve(`${INPUT_DIR}/${id}`);\n\t\n\t// if the node is missing, create it\n\tif (!node) {\n\t\tnode = { };\n\t\troot[id] = node;\n\t}\n\n\t// process all diles in a directory\n\tawait scanDirectory(source, { }, async dir => {\n\t\tawait generateResource(root, node, dir, { nodeId: dir, subdir: id });\n\t});\n}","\nimport _ from 'lodash';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport getMP3Duration from 'get-mp3-duration';\nimport fluent from 'fluent-ffmpeg';\n\nimport { fileToKey } from './utils.js';\nimport paths from './paths.js';\nimport getMp3Duration from 'get-mp3-duration';\n\n// create sound sprites from \nexport default async function generateSoundSprites(root) {\n\tconst { INPUT_DIR, OUTPUT_DIR } = paths;\n\tconst dir = 'sounds';\n\tconst input = path.resolve(INPUT_DIR, dir)\n\n\t// collect possible sprites\n\tconst sprites = [ ];\n\tconst entries = await fs.readdir(input);\n\tfor (const entry of entries) {\n\t\t\n\t\t// filter out hidden files\n\t\tif (/^\\./i.test(entry)) continue;\n\t\t\n\t\t// check the file info\n\t\tconst file = path.resolve(input, entry);\n\t\tconst stat = await fs.stat(file);\n\n\t\t// if is an mp3 file\n\t\tif (isMP3(file)) {\n\t\t\tconst buffer = await fs.readFile(file);\n\t\t\tconst duration = getMP3Duration(buffer);\n\t\t\tsprites.push({ file, duration });\n\t\t}\n\t\t// is a directory -- check for more MP3 Files\n\t\telse if (stat.isDirectory()) {\n\t\t\tawait copyMP3s(`${dir}/${entry}`);\n\t\t}\n\n\t}\n\n\t// gather the paths to concat\n\tconst files = [ ];\n\tconst silence = path.resolve(INPUT_DIR, 'silence.mp3');\n\tconst silenceBuffer = await fs.readFile(silence);\n\tconst spacer = getMp3Duration(silenceBuffer);\n\n\t// calculate the sprite info\n\tlet duration = 0;\n\troot.sounds = { };\n\tfor (const sprite of sprites) { \n\n\t\t// save the file to use\n\t\tfiles.push(sprite.file, silence);\n\n\t\t// get the key\n\t\tconst key = fileToKey(sprite.file);\n\t\troot.sounds[key] = [ duration, sprite.duration ];\n\n\t\t// update the duration - include an\n\t\t// extra 100 ms for silence between sounds\n\t\tduration += sprite.duration + spacer;\n\t}\n\n\t// merge the files\n\tconst output = path.resolve(OUTPUT_DIR, `sounds/common.mp3`);\n\tawait mergeMP3FilesToOutput(output, files);\n\tconsole.log(`[audio] ${dir}/common.mp3`);\n}\n\n\n// copy and compress each MP3 in a directory\nasync function copyMP3s(dir) {\n\tconst { INPUT_DIR, OUTPUT_DIR } = paths;\n\tconst input = path.resolve(INPUT_DIR, dir);\n\tconst output = path.resolve(OUTPUT_DIR, dir);\n\n\tconst entries = await fs.readdir(input);\n\tfor (const entry of entries) {\n\n\t\t// ensure it's an mp3\n\t\tif (!isMP3(entry)) continue;\n\n\t\t// make the directory, if needed\n\t\tconst exists = await fs.exists(output);\n\t\tif (!exists) await fs.mkdirp(output);\n\n\t\t// copy the file\n\t\tconst source = path.resolve(input, entry);\n\t\tconst target = path.resolve(output, entry);\n\n\t\t// copy the compressed version\n\t\tawait copyAndCompressMP3(source, target);\n\t\tconsole.log(`[audio] ${dir}/${entry}`);\n\t}\n}\n\n// handles copying individual MP3 files\nasync function copyAndCompressMP3(input, output) {\n\treturn new Promise((resolve, reject) => {\n\t\tfluent()\n\n\t\t\t// get the file top copy\n\t\t\t.input(input)\n\t\t\n\t\t\t// handle events\n\t\t\t.on('end', resolve)\n\t\t\t.on('error', reject)\n\n\t\t\t// configure audio\n\t\t\t.audioBitrate(48)\n\t\t\t.audioChannels(1)\n\n\t\t\t// then merge it\n\t\t\t.mergeToFile(output);\n\t});\n}\n\n// merge all mp3 files into a single file\nasync function mergeMP3FilesToOutput(output, paths) {\n\treturn new Promise((resolve, reject) => {\n\t\t\n\t\t// prepare the command\n\t\tconst concat = fluent();\n\t\t\t\n\t\t// add all files\n\t\tfor (const path of paths)\n\t\t\tconcat.input(path);\n\n\t\t// export\n\t\tconcat\n\t\t\t// handle events\n\t\t\t.on('end', resolve)\n\t\t\t.on('error', reject)\n\n\t\t\t// configure audio\n\t\t\t.audioBitrate(48)\n\t\t\t.audioChannels(1)\n\n\t\t\t// then merge it\n\t\t\t.mergeToFile(output);\n\t});\n}\n\n// checks if a file is an MP3 file\nfunction isMP3(file) {\n\tconst base = path.basename(file);\n\treturn /\\.mp3$/i.test(base);\n}\n","import _ from 'lodash';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport * as cache from './cache.js';\nimport paths, { replacePaths } from './paths.js';\n\n// resource generation approaches\nimport generateResource from './generate-resource.js';\nimport generateResourcesFromDirectory from './generate-resource-from-dir.js';\nimport scanDirectory from './scan-directory.js';\nimport generateSoundsSpritesheet from './generate-sounds-spritesheet.js';\n\n// check if debugging mode should be used\nconst DEBUG = !!~process.argv.indexOf('--debug');\nconst VERSION = '1.0.4';\n\n/** handles compiling all resources in the repo folder */\nexport async function compile(inputDir, outputDir) {\n\t// it's somewhat difficult to ensure the composer is\n\t// the correct version when used from different repos\n\t// this will make it known which version is being run\n\tconsole.log(`nt-composer: v${VERSION}`);\n\t\n\t// change the input/output directories\n\tif (inputDir && outputDir) {\n\t\treplacePaths(inputDir, outputDir);\n\t}\n\n\t// prepare the data\n\tconst { INPUT_DIR, OUTPUT_DIR } = paths;\n\tconst exported = path.resolve(`${OUTPUT_DIR}/manifest.json`);\n\n\t// load the previous document into the cache\n\tawait cache.load(exported);\n\n\t// ensure directories\n\tawait fs.mkdirp(OUTPUT_DIR);\n\n\t// TODO: restore data\n\t// check for changes\n\tconst data = { };\n\tif (!('spritesheets' in data)) data.spritesheets = { };\n\tif (!('tracks' in data)) data.tracks = { };\n\n\t// start generating files\n\tawait generateResource(data, data, 'particles', { });\n\tawait generateResource(data, data, 'images', { });\n\tawait generateResource(data, data, 'animations', { });\n\tawait generateResource(data, data, 'emitters', { });\n\tawait generateResource(data, data, 'crowd', { });\n\t\n\t// generate resources that have sub files\n\tawait generateResourcesFromDirectory(data, data.trails, 'trails', { });\n\tawait generateResourcesFromDirectory(data, data.intro, 'intros', { });\n\tawait generateResourcesFromDirectory(data, data.nitros, 'nitros', { });\n\tawait generateResourcesFromDirectory(data, data.cars, 'cars', { });\n\tawait generateResourcesFromDirectory(data, data.namecards, 'namecards', { });\n\tawait generateResourcesFromDirectory(data, data.extras, 'extras', { });\n\n\t// tracks have variations so each directory should\n\t// be scanned to see all available types\n\tawait scanDirectory(`${INPUT_DIR}/tracks`, { }, async (trackName, fullTrackDir) => {\n\n\t\t// save the track node\n\t\tdata.tracks[trackName] = { };\n\n\t\t// create all variations\n\t\tawait scanDirectory(fullTrackDir, { }, async variant => {\n\t\t\tdata.tracks[trackName][variant] = { };\n\n\t\t\t// generate a resource per variation\n\t\t\tawait generateResource(data, data.tracks[trackName], variant, { \n\t\t\t\tsubdir: `tracks/${trackName}`\n\t\t\t});\n\t\t});\n\t});\n\n\t// create the sounds, if needed\n\t// await generateSoundsSpritesheet(data);\n\n\t// include animation data\n\t// const animations = await fs.readFile(`${INPUT_DIR}/crowd/animations.json`);\n\t// data.crowd = JSON.parse(animations.toString());\n\n\t// save the completed file\n\tconst generated = JSON.stringify(data, null, DEBUG ? 2 : null);\n\tconsole.log(`[export] ${exported}`);\n\tawait fs.writeFile(exported, generated);\n}\n","export { compile } from './compile.js';\nimport * as allUtils from './utils.js';\nexport const utils = allUtils;"]}